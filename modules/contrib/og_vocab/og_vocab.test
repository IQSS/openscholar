<?php

/**
 * @file
 * Test organic groups vocabulary module.
 */

class OgVocabMenuAccessTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('OG vocabulary access'),
      'description' => t('Check access to vocabulary related menu items.'),
      'group' => t('Organic groups vocabulary'),
    );
  }

  function setUp() {
    parent::setUp('og_vocab');

    // Add OG group field sto article node.
    og_create_field(OG_GROUP_FIELD, 'node', 'article');
  }

  /**
   * Test access to vocabulary.
   *
   * - User not a member of a group.
   * - User member of group but no permissions
   * - User member of group with correct permissions.
   * - User is admin in group.
   * - User has 'administer organic groups' permissions.
   */
  function testAccess() {
    $perm = 'administer group';

    // Create two users.
    $user1 = $this->drupalCreateUser();
    $user2 = $this->drupalCreateUser();

    // Create group owned by user1.
    $settings = array();
    $settings['type'] = 'article';
    $settings[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    $settings['uid'] = $user1->uid;
    $node = $this->drupalCreateNode($settings);

    // Create a terms vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = 'Terms';
    $vocabulary->machine_name = 'terms';
    taxonomy_vocabulary_save($vocabulary);

    // Create a term in the vocabulary.
    $term = new stdClass();
    $term->name = "term 1";
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);

    // Relate vocabulary to group.
    og_vocab_relation_save($vocabulary->vid, 'node', $node->nid);

    $this->assertTrue(og_user_access('node', $node->nid, 'administer taxonomy', $user1), 'User1 has access to the vocabulary.');
    $this->assertFalse(og_user_access('node', $node->nid, 'administer taxonomy', $user2), 'User2 does not have access to the vocabulary.');

    $paths = array(
      'taxonomy',
      'taxonomy/add',
      'taxonomy/terms',
      'taxonomy/terms/list',
      'taxonomy/terms/edit',
      'taxonomy/terms/add',
    );

    $this->drupalLogin($user1);
    foreach ($paths as $path) {
      $path = 'group/node/1/admin/' . $path;
      $this->drupalGet($path);
      $this->assertResponse(200, format_string('User1 can access @path', array('@path' => $path)));
    }

    $path = 'taxonomy/term/1/edit';
    $this->drupalGet($path);
    $this->assertResponse(200, format_string('User1 can access @path', array('@path' => $path)));

    $this->drupalLogin($user2);
    foreach ($paths as $path) {
      $path = 'group/node/1/admin/' . $path;
      $this->drupalGet($path);
      $this->assertResponse(403, format_string('User2 can not access @path', array('@path' => $path)));
    }

    $path = 'taxonomy/term/1/edit';
    $this->drupalGet($path);
    $this->assertResponse(403, format_string('User2 can not access @path', array('@path' => $path)));
  }
}


class OgVocabComplexWidgetTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('OG vocabulary widget'),
      'description' => t('Test the comlpex widget behavior.'),
      'group' => t('Organic groups vocabulary'),
    );
  }

  function setUp() {
    parent::setUp('og_vocab');

    // Add OG group field sto article node.
    og_create_field(OG_GROUP_FIELD, 'node', 'article');

    $this->drupalCreateContentType(array('type' => 'post'));
    og_create_field(OG_AUDIENCE_FIELD, 'node', 'post');
    og_create_field(OG_VOCAB_FIELD, 'node', 'post');

    // Create two users.
    $user1 = $this->drupalCreateUser(array('access content', 'create post content'));
    $user2 = $this->drupalCreateUser();

    // Array key with the node ID (to be created) and the user ID as the
    // value.
    $info = array(
      // Groups owned by user1.
      1 => $user1->uid,
      2 => $user1->uid,
      // Group owned by user2.
      3 => $user2->uid,
    );

    $settings = array();
    $settings['type'] = 'article';
    $settings[OG_GROUP_FIELD][LANGUAGE_NONE][0]['value'] = 1;
    foreach ($info as $uid) {
      $settings['uid'] = $uid;
      $node = $this->drupalCreateNode($settings);
    }

    // Array keyed by a serial ID and the value is array with node ID of
    // the group and the settings to pass to og_vocab_create_og_vocab().
    $info = array(
      1 => array('nid' => 1, 'settings' => array('required' => TRUE)),
      2 => array('nid' => 1, 'settings' => array('cardinality' => 1)),
      3 => array('nid' => 2, 'settings' => array('widget_type' => 'entityreference_autocomplete')),
      4 => array('nid' => 3, 'settings' => array()),
    );

    $og_vocabs = array();
    foreach ($info as $id => $value) {
      // Create a terms vocabulary and relate them to the groups.
      $vocabulary = new stdClass();
      $vocabulary->name = "Vocabulary $id";
      $vocabulary->machine_name = "vocabulary_$id";
      taxonomy_vocabulary_save($vocabulary);

      // Relate vocabulary to group.
      og_vocab_relation_save($vocabulary->vid, 'node', $value['nid']);

      // Create OG-vocab entity.
      $og_vocab = og_vocab_create_og_vocab($vocabulary->vid, 'node', 'post', $value['settings']);
      $og_vocab->save();
      $og_vocabs[$vocabulary->vid] = $og_vocab;

      // Create terms in the vocabulary.
      for ($i = 1; $i < 3; ++$i) {
        $term = new stdClass();
        $term->name = "Vocab $vocabulary->vid term $i";
        $term->vid = $vocabulary->vid;
        taxonomy_term_save($term);
      }
      $this->drupalLogin($user1);
      $this->user1 = $user1;
    }
  }

  /**
   * Test widget.
   */
  function testWidget() {
    // Assert user can see widget with 3 vocabularies.
    $this->drupalGet('node/add/post');
    $names = array(
      'og_vocabulary[und][0][2][]',
      'og_vocabulary[und][0][3]',
      'og_vocabulary[und][0][4][0][target_id]',
    );
    foreach ($names as $name) {
      $this->assertField($name, 'Expected vocabulary sub-widget found.');
    }

    // Assert sub-widget is required and multiple.

    // Assert sub-widget is not-required and not-multiple.

    // Assert sub-widget is autocomplete.
  }

  /**
   * Test Showing widget by context.
   */
  function testContext() {
    module_enable(array('og_context', 'og_vocab_test'));

    // Subscribe user to user2's group.
    og_group('node', 3, array('entity' => $this->user1));

    $field = field_info_field(OG_VOCAB_FIELD);
    $field['settings']['handler_settings']['behaviors']['og_vocab']['use_context'] = 'force';
    field_update_field($field);

    $this->drupalGet('node/add/post');
    $names = array(
      'og_vocabulary[und][0][2][]' => FALSE,
      'og_vocabulary[und][0][3]' => FALSE,
      'og_vocabulary[und][0][4][0][target_id]' => FALSE,
      // Belongs to another group.
      'og_vocabulary[und][0][5][]' => FALSE,
    );
    $this->assertSubWidgets($names);

    // Set og-context, by passing it in the URL, and the test-module
    // will make sure to set the context.
    variable_set('og_vocab_test_context_nid', 3);
    $this->drupalGet('node/add/post');
    $names = array(
      'og_vocabulary[und][0][2][]' => FALSE,
      'og_vocabulary[und][0][3]' => FALSE,
      'og_vocabulary[und][0][4][0][target_id]' => FALSE,
      // Belongs to another group.
      'og_vocabulary[und][0][5][]' => TRUE,
    );
    $this->assertSubWidgets($names);

    $field['settings']['handler_settings']['behaviors']['og_vocab']['use_context'] = 'yes';
    field_update_field($field);
    variable_set('og_vocab_test_context_nid', 3);
    $this->drupalGet('node/add/post');
    $names = array(
      'og_vocabulary[und][0][2][]' => FALSE,
      'og_vocabulary[und][0][3]' => FALSE,
      'og_vocabulary[und][0][4][0][target_id]' => FALSE,
      // Belongs to another group.
      'og_vocabulary[und][0][5][]' => TRUE,
    );
    $this->assertSubWidgets($names);

    variable_set('og_vocab_test_context_nid', FALSE);
    $this->drupalGet('node/add/post');
    $names = array(
      'og_vocabulary[und][0][2][]' => TRUE,
      'og_vocabulary[und][0][3]' => TRUE,
      'og_vocabulary[und][0][4][0][target_id]' => TRUE,
      // Belongs to another group.
      'og_vocabulary[und][0][5][]' => TRUE,
    );
    $this->assertSubWidgets($names);

    $field['settings']['handler_settings']['behaviors']['og_vocab']['use_context'] = 'no';
    field_update_field($field);
    variable_set('og_vocab_test_context_nid', 3);
    $this->drupalGet('node/add/post');

    $names = array(
      'og_vocabulary[und][0][2][]' => TRUE,
      'og_vocabulary[und][0][3]' => TRUE,
      'og_vocabulary[und][0][4][0][target_id]' => TRUE,
      // Belongs to another group.
      'og_vocabulary[und][0][5][]' => TRUE,
    );
    $this->assertSubWidgets($names);
  }

  /**
   * Helper function to assert sub-widgets appear.
   */
  function assertSubWidgets($names) {
    foreach ($names as $name => $value) {
      $method = $value ? 'assertField' : 'assertNoField';
      $message = $value ? 'Expected vocabulary sub-widget found.' : 'Vocabulary sub-widget not found as expected.';
      $this->{$method}($name, $message);
    }
  }
}



<?php

function media_embed_menu() {
  $items['file/add/code'] = array(
    'title' => 'HTML',
    'description' => 'Add raw embed code to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_embed_add'),
    'access callback' => 'media_embed_access',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/media/media_embed'] = array(
    'title' => 'Embeded Code Domain Whitelist',
    'description' => 'Set the whitelist of allowed domains for iframes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_embed_settings'),
    'file' => 'media_embed.admin.inc',
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_embed_ctools_plugin_api($module, $api) {
  if ($module == 'media' && $api == 'browser') {
    return array(
      'version' => 1,
    );
  }

  // required for browser previews and rendering of final file entity
  if ($module == 'file_entity' && $api == 'file_default_displays') {
    return array(
      'version' => 1,
    );
  }
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_embed_media_browser_plugin_info() {
  $plugins = array();
  $plugins['media_embed'] = array(
    'title' => t('HTML'),
    'class' => 'MediaBrowserHTML',
  );
  return $plugins;
}

/**
 * Access callback for the media_embed media browser plugin.
 */
function media_embed_access() {
  return user_access('administer media') || user_access('add media as raw html');
}

/**
 * Implement hook_permission().
 */
function media_embed_permission() {
  return array(
    'add media as raw html' => array(
      'title' => t('Add media as raw html'),
      'description' => t('Add media from remote sources such as other websites, YouTube, etc'),
    ),
  );
}

function media_embed_add($form, &$form_state = array(), $types = NULL) {
  $file = file_uri_to_object("", FALSE);
  $file->type = 'html';
  $form['#file'] = $file;
  $form_state['file'] = $file;

  $old = $form;

  field_attach_form('file', $file, $form, $form_state);

  $diff = array_diff_key($form, $old);

  // remove unnecessary fields
  $whitelist = array(
    'field_html_title',
    'field_html_code',
    'og_group_ref',
  );
  foreach ($diff as $key => $value) {
    if (strpos($key, '#' === 0) || in_array($key, $whitelist)) {
      $old[$key] = $value;
    }
  }

  $form = $old;

  $white = media_embed_get_whitelist();
  if (count($white)) {
    $form['whitelist'] = array(
      '#markup' => t('You can add html with iframe, object, embed and script tags from the following sites:').'<br>'.implode(', ', $white),
    );
  }
  else {
    $form['whitelist'] = array(
      '#markup' => t('You may not add html with iframe, object, embed or script tags. Ask your site administrator to remedy this.'),
    );
  }
  $form['whitelist']['#weight'] = 4;

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Implements hook_validate.
 * Ensures the HTML code given doesn't have any links to dangerous URLs
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_embed_add_validate($form, &$form_state) {
  // Fields validation
  field_attach_form_validate('file', $form_state['file'], $form, $form_state);

  $html = field_get_items('file', $form_state['file'], 'field_html_code');
  $html = trim($html[0]['value']);

  if (!media_embed_check_src($html)) {
    form_set_error('embed_code', 'This html contains an iframe, object, embed or script tag from an untrusted domain. If you believe this domain is safe, contact your site administrator.');
  }
}

function media_embed_add_submit($form, &$form_state) {
  $html = field_get_items('file', $form_state['file'], 'field_html_code');
  $html = trim($html[0]['value']);

  // create the new file entity
  $uri = 'embed://'.md5($html);
  $file = file_uri_to_object($uri);
  $titles = field_get_items('file', $form_state['file'], 'field_html_title');
  $file->filename = trim($titles[0]['value']);
  $file->type = 'html';

  // save the fields and entity
  field_attach_submit('file', $file, $form, $form_state);
  $file = file_save($file);
  $form_state['file'] = $file;

  // Redirect to the file edit page after submission.
  if (media_access('edit')) {
    $destination = array('destination' => 'admin/content/file');
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination + drupal_get_query_parameters()));
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}

/**
 * Validates the srcs of various html tags to ensure they're all
 * from trusted domains
 * @param $html - The html string we're checking against
 */
function media_embed_check_src($html) {
  // I could do this with regexes
  // but that would be harder than it needs to be
  try {
    $dom = new DOMDocument();
  }
  // for some reason DOMDocument fails completely when debugging.
  // it works fine when not debugging, its just something to be aware of
  catch (Exception $e) {
    return false;
  }
  if (@$dom->loadHTML($html)) {
    $urls = array();
    $iframes = $dom->getElementsByTagName('iframe');
    $embed = $dom->getElementsByTagName('embed');
    $object = $dom->getElementsByTagName('object');
    $param = $dom->getElementsByTagName('param');
    $script = $dom->getElementsByTagName('script');

    foreach (array($iframes, $embed, $object, $param, $script) as $nodes) {
      for ($i=0; $i<$nodes->length;$i++) {
        $n = $nodes->item($i);
        if ($n->hasAttribute('src')) {
          $urls[] = $n->getAttribute('src');
        }
        elseif ($n->hasAttribute('href')) {
          $urls[] = $n->getAttribute('href');
        }
        elseif ($n->hasAttribute('data')) {
          $urls[] = $n->getAttribute('data');
        }
        elseif ($n->hasAttribute('name') && $n->hasAttribute('value') && $n->getAttribute('name') == 'movie') {
          $urls[] = $n->getAttribute('value');
        }
      }
    }

    $whitelist = media_embed_get_whitelist();
    foreach ($urls as $url) {
      // if the URL is too bad, parse will be false
      $domain = array();
      $this_pass = false;
      if ($parse = parse_url($url, PHP_URL_HOST)) {
        // construct the domain backwards and check it
        // ie. www.cga.harvard.edu will check against:
        // edu
        // harvard.edu
        // cga.harvard.edu
        // www.cga.harvard.edu
        $host = explode('.', $parse);
        $host = array_reverse($host);
        foreach ($host as $part) {
          array_unshift($domain, $part);
          if (in_array(implode('.',$domain), $whitelist)) {
            $this_pass = true;
            break;
          }
        }
        if (!$this_pass) return FALSE;  // the URL's domain was not in the whitelist
      }
      else {
        return FALSE;  // the URL was malformed, which could lead anywhere
      }
    }
    return TRUE;  // None of the URLS failed the domain check
  }
  return FALSE;  // the HTML was malformed, which no real service would do. This requires a real feat to actually pull off.
}

/**
 * Returns an array of all allowed domains
 * Invokes hook_media_embed_whitelist
 */
function media_embed_get_whitelist() {
  $domains = module_invoke_all('media_embed_whitelist');
  if (!is_array($domains)) {
    $domains = array();
  }

  $domains = array_merge($domains, variable_get('media_embed_whitelist', array()));
  return $domains;
}

/**
 *  Create stream wrapper for oEmbed videos.
 */
function media_embed_stream_wrappers() {
  return array(
    'embed' => array(
      'name' => t('Embedded HTML'),
      'class' => 'MediaEmbedStreamWrapper',
      'description' => t('HTML provided by user.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}



/**
 * Implements hook_file_formatter_info().
 */
function media_embed_file_formatter_info() {
  $formatters['media_embed'] = array(
    'label' => t('Embedded HTML'),
    'default settings' => array('width' => '560', 'height' => '340'),
    'view callback' => 'media_embed_file_formatter_media_embed_view',
    'settings callback' => 'media_embed_file_formatter_media_embed_settings',
    'file types' => array('html'),
  );
  $formatters['media_embed_thumbnail'] = array(
    'label' => t('Embedded HTML Thumbnail'),
    'default settings' => array('width' => '560', 'height' => '340'),
    'view callback' => 'media_embed_file_formatter_media_embed_thumbnail_view',
    'settings callback' => 'media_embed_file_formatter_media_embed_thumbnail_settings',
    'file types' => array('html'),
  );
  return $formatters;
}

/**
 * Implements hook_media_wysiwyg_allowed_view_modes.
 *
 * Limits the view modes for our file type to just original
 */
function media_embed_media_wysiwyg_allowed_view_modes_alter(&$view_modes, $file) {
  if ($file->type == 'html') {
    $view_modes = array('media_original' => $view_modes['media_original']);
  }
}

/**
 * Implements hook_file_default_displays().
 *
 * Provides default display configurations for media types.
 *
 * @see file_entity_schema()
 */
function media_embed_file_default_displays() {
  $default_displays = array();

  $default_styles = array();
  foreach(media_type_get_types() as $name => $type) {
    // For default and Large view modes, use the default width and height from
    // hook_file_formatter_info().
    $default_styles[$name . '__default__media_embed'] = array();
    $default_styles[$name . '__default__media_embed_thumbnail'] = array();

    // For the Preview view mode, match the width and height of the square
    // thumbnail in media_image_default_styles().
    $default_styles[$name . '__media_preview__media_embed_thumbnail'] = array('width' => '180', 'height' => '180');

    // For the Original view mode, set width and height to empty, so that they
    // use what's returned by the oEmbed response.
    $default_styles[$name . '__media_original__media_embed'] = array('width' => '', 'height' => '');
    $default_styles[$name . '__media_original__media_embed_thumbnail'] = array('width' => '', 'height' => '');
  }

  foreach ($default_styles as $display_name => $settings) {
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 0,
      'settings' => $settings,
    );
  }

  return $default_displays;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_embed_file_formatter_media_embed_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'embed') {

    // Not a WYSIWYG editor instance.
    if (empty($file->override['wysiwyg'])) {
      field_attach_prepare_view('file', array($file->fid => $file), 'full');
      entity_prepare_view('file', array($file->fid => $file));
      $file->field_html_code['und'][0]['safe_value'] = $file->field_html_code['und'][0]['value'];

      return field_attach_view('file', $file, 'full');
    }

    // WYSIWYG will not handle iframes and the like properly.
    // Just let Media create a placeholder image
    else {
      //return array();
    }
  }
}
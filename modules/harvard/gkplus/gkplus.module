<?php
// $Id$

/**
 * @file
 * Customizations for Gary King's website.
 */

/*
 * Implementation of hook_views_pre_build().
 *
 * Removes pager from the People page on Gary's website only.
 */
function gkplus_views_pre_build(&$view) {
  if (!_gkplus_check_purl()) {
    return;
  }
  if ($view->name !== 'os_profiles') {
    return;
  }
  $pager = $view->display_handler->get_option('pager');
  $pager['options']['items_per_page'] = 0;
  $view->display_handler->set_option('pager', $pager);
}

/**
 * Returns TRUE if the purl of the current vsite is "gkplus".
 */
function _gkplus_check_purl($purl = 'gking') {
  $vsite = vsite_get_vsite();
  return ($vsite && $vsite->group->purl == $purl);
}

/**
 * Implements hook_node_insert().
 */
function gkplus_node_insert($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || !$node->nid) {
    return;
  }
  _gkplus_minitheme_set($node);
}

/**
 * Implements hook_node_update().
 */
function gkplus_node_update($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || !$node->nid) {
    return;
  }
  _gkplus_minitheme_set($node);
}

/**
 * Implements hook_node_presave().
 */
function gkplus_node_presave($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || strlen($node->title) > 0) {
    return;
  }
  $node->title = 'BLANK_TITLE';
}

/**
 * Implements hook_node_view().
 */
function gkplus_node_view($node, $view_mode, $langcode) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || $node->title !== 'BLANK_TITLE') {
    return;
  }
  $node->title = '';
}

/**
 * Implements hook_node_prepare().
 */
function gkplus_node_prepare($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || $node->title !== 'BLANK_TITLE') {
    return;
  }
  $node->title = '';
}

/**
 * Implements hook_node_validate().
 */
function gkplus_node_validate($node, $form, $form_state) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || strlen($node->title) > 0) {
    return;
  }
  dpm('validating...');
  $vocab_name = "Research Interests";
  if (!_gkplus_node_in_vocab($node, $vocab_name)) {
    form_set_error('title', t("Title is required for pages that are not in the <em>@vocab_name</em> taxonomy", array('@vocab_name' => $vocab_name)));
  }
}

/**
 * Node validate callback; only allows nodes with "Research Interests" term(s).
 */
function _gkplus_node_in_vocab($node, $vocab_name) {
  $items = field_get_items('node', $node, 'og_vocabulary');
  $taxonomy = array_shift($items);
  if (!isset($taxonomy) || !is_array($taxonomy) || count($taxonomy) === 0) {
    return FALSE;
  }
  foreach ($taxonomy as $vid => $terms) {
    if (!is_numeric($vid) || !count($terms) || _gking_empty_terms($terms)) {
      continue;
    }
    $vocab = taxonomy_vocabulary_load($vid);
    if ($vocab && $vocab->name === $vocab_name) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Returns TRUE if no child items of an array have a numeric 'target_id'.
 *
 * In other words, returns FALSE if at least one numeric target_id is found.
 */
function _gking_empty_terms($terms) {
  if (sizeof($terms) === 0) {
    return TRUE;
  }
  foreach ($terms as $term) {
    if (isset($term['target_id']) && is_numeric($term['target_id'])) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter() for page_node_form.
 */
function gkplus_form_page_node_form_alter(&$form, &$form_state, $form_id) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $form['title']['#required'] = FALSE;
}

/**
 * Sets whether the alternate branding should be used
 */
function _gkplus_minitheme_set($node) {
  /*
  $a_alt_theme_nodes = variable_get('iqss_gking::alternate_theme_nodes', array());

  if ($b_value && !in_array($nid, $a_alt_theme_nodes)) {
    $a_alt_theme_nodes[] = $nid;
    variable_set('iqss_gking::alternate_theme_nodes', $a_alt_theme_nodes);
  }
  elseif (!$b_value && in_array($nid, $a_alt_theme_nodes)) {
    unset($a_alt_theme_nodes[array_search($nid, $a_alt_theme_nodes)]);
    variable_set('iqss_gking::alternate_theme_nodes', $a_alt_theme_nodes);
  }*/
}
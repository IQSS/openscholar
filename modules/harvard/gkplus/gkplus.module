<?php
// $Id$

/**
 * @file
 * Customizations for Gary King's website.
 */

/**
 * Implements hook_menu().
 */
function gkplus_menu() {
  $items = array();

  $items['taxonomy/%ctools_js/nodeorder/%'] = array(
    'title' => 'Order Taxonomy Nodes',
    'page callback' => 'gkplus_nodeorder_form',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['gking_update_filefield/%'] = array(
    'title' => 'Update Filefield',
    'page callback' => 'gkplus_update_filefield_page',
    'page arguments' => array(1),
    'access callback' => 'gkplus_access_file',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_strongarm().
 *
 * @ingroup nodeorder
 */
function gkplus_strongarm() {
  $conf = array();

  // Hide the nodeorder links on term nodes
  $conf['nodeorder_show_links_on_node'] = 0;

  return $conf;
}

/**
 * Page callback; provides nodeorder form for a given taxonomy term.
 *
 * @ingroup nodeorder
 */
function gkplus_nodeorder_form($js = NULL, $tid = NULL) {
  // Gracefully degrades if $js is not set.
  if (!$js) {
    return drupal_get_form('nodeorder_admin_display_form', $tid);
  }

  ctools_include('ajax');
  ctools_include('modal');
  require_once (drupal_get_path('module', 'nodeorder') . '/nodeorder.admin.inc');

  $form_state = array(
    'title' => t('Order Term Nodes'),
    'ajax' => TRUE,
    'build_info' => array(
       'args' => array($tid),
    ),
  );

  $output = ctools_modal_form_wrapper('nodeorder_admin_display_form', $form_state);

  if ($form_state['submitted'] && form_get_errors() == FALSE) {
    $output = array();
    $output[] = ctools_ajax_command_reload();
  }
  print ajax_render($output);
  exit;
}

/**
 * Implements hook_init().
 */
function gkplus_init() {
  if (!_gkplus_check_purl()) {
    return;
  }
  drupal_add_css(drupal_get_path('module', 'gkplus') . '/gkplus.css', array('every_page' => TRUE));
}

/**
 * Impements hook_cron().
 */
function gkplus_cron() {
  $options = array(
    'tree' => TRUE,
    'max_depth' => 2,
    'description' => TRUE,
  );

  variable_set('os_taxonomy_term_page_options', $options);

  _gkplus_updatefile_cron();
}

/**
 * Implements hook_views_pre_build().
 *
 * Removes pager from the People page on Gary's website only.
 */
function gkplus_views_pre_build(&$view) {
  if (!_gkplus_check_purl()) {
    return;
  }
  if ($view->name !== 'os_profiles') {
    return;
  }
  $pager = $view->display_handler->get_option('pager');
  $pager['options']['items_per_page'] = 0;
  $view->display_handler->set_option('pager', $pager);
}

/**
 * Implements hook_node_insert().
 */
function gkplus_node_insert($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || !$node->nid) {
    return;
  }
  _gkplus_entity_setting_update($node->nid, 'minitheme_nodes', $node->gkplus_minitheme);
}

/**
 * Implements hook_node_update().
 */
function gkplus_node_update($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || !$node->nid) {
    return;
  }
  _gkplus_entity_setting_update($node->nid, 'minitheme_nodes', $node->gkplus_minitheme);
}

/**
 * Implements hook_node_presave().
 */
function gkplus_node_presave($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || strlen($node->title) > 0) {
    return;
  }
  $node->title = 'BLANK_TITLE';
}

/**
 * Implements hook_node_view().
 */
function gkplus_node_view($node, $view_mode, $langcode) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || $node->title !== 'BLANK_TITLE') {
    return;
  }
  $node->title = '';
}

/**
 * Implements hook_node_prepare().
 */
function gkplus_node_prepare($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || $node->title !== 'BLANK_TITLE') {
    return;
  }
  $node->title = '';
}

/**
 * Implements hook_node_validate().
 */
function gkplus_node_validate($node, $form, $form_state) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || strlen($node->title) > 0) {
    return;
  }
  $vocab_name = "Research Interests";
  if (!_gkplus_node_in_vocab($node, $vocab_name)) {
    form_set_error('title', t("Title is required for pages that are not in the <em>@vocab_name</em> taxonomy", array('@vocab_name' => $vocab_name)));
  }
}

/**
 * Node validate callback; only allows nodes with "Research Interests" term(s).
 *
 * @see gkplus_node_validate()
 */
function _gkplus_node_in_vocab($node, $vocab_name) {
  $items = field_get_items('node', $node, 'og_vocabulary');
  $taxonomy = array_shift($items);
  if (!isset($taxonomy) || !is_array($taxonomy) || count($taxonomy) === 0) {
    return FALSE;
  }
  foreach ($taxonomy as $vid => $terms) {
    if (!is_numeric($vid) || !count($terms) || _gking_empty_terms($terms)) {
      continue;
    }
    $vocab = taxonomy_vocabulary_load($vid);
    if ($vocab && $vocab->name === $vocab_name) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Returns TRUE if no child items of an array have a numeric 'target_id'.
 *
 * In other words, returns FALSE if at least one numeric target_id is found.
 *
 * @see _gkplus_node_in_vocab()
 */
function _gking_empty_terms($terms) {
  if (sizeof($terms) === 0) {
    return TRUE;
  }
  foreach ($terms as $term) {
    if (isset($term['target_id']) && is_numeric($term['target_id'])) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term.
 *
 * @ingroup term_display_options
 */
function gkplus_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $form['advanced']['gkplus'] = array(
    '#type' => 'fieldset',
    '#title' => 'Custom theme settings',
    '#collapsible' => FALSE,
    'gkplus_hidden_heading_terms' => array(
      '#type' => 'checkbox',
      '#default_value' => _gkplus_entity_setting($form['tid']['#value'], 'hidden_heading_terms'),
      '#title' => t('Hidden heading'),
      '#description' => t('Hide this term heading from displaying on taxonomy page'),
    ),
    'gkplus_child_indent_terms' => array(
      '#type' => 'checkbox',
      '#default_value' => _gkplus_entity_setting($form['tid']['#value'], 'child_indent_terms'),
      '#title' => t('Child indent'),
      '#description' => t('Indent this term when displayed as a child term on taxonomy parent term page.'),
    ),
  );
  $form['#submit'][] = 'gkplus_form_taxonomy_form_term_submit';
}

/**
 * Form submit callback; triggers term settings updates on term save.
 *
 * @see gkplus_form_taxonomy_form_term_alter()
 */
function gkplus_form_taxonomy_form_term_submit($form, &$form_state) {
  if (!$form_state['values']['tid']) {
    return;
  }
  $settings = array('hidden_heading_terms', 'child_indent_terms');
  foreach ($settings as $setting) {
    _gkplus_entity_setting_update($form_state['values']['tid'], $setting, $form_state['values']['gkplus_' . $setting]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary.
 *
 * Hides nodeorder's "Orderable" checkbox on the vocabulary edit form.
 *
 * @see gkplus_enable()
 *
 * @ingroup nodeorder
 */
function gkplus_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
  if (isset($form['settings']['orderable'])) {
    $form['settings']['orderable']['#type'] = 'value';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function gkplus_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $default_value = (isset($form['#node']->nid)) ? _gkplus_entity_setting($form['#node']->nid, 'minitheme_nodes') : 0;
  $form['gkplus'] = array(
    '#type' => 'fieldset',
    '#access' => TRUE,
    '#title' => t('Custom theme settings'),
    '#weight' => 98,
    '#group' => 'additional_settings'
  );
  $form['gkplus']['gkplus_minitheme'] = array(
    '#title' => t('Remove branding'),
    '#type' => 'checkbox',
    '#size' => 65,
    '#default_value' => $default_value,
    '#description' => t('Display this post using a minimalist theme without branding.'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for page_node_form.
 */
function gkplus_form_page_node_form_alter(&$form, &$form_state, $form_id) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $form['title']['#required'] = FALSE;
}

/**
 * Implements hook_preprocess_HOOK for html.tpl.php.
 *
 * Adds the miniteme (gking-alt) class attribute to configured node view pages.
 */
function gkplus_preprocess_html(&$vars) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $object = menu_get_object();
  if (!isset($object)) {
    return;
  }
  if ($object->nid && _gkplus_entity_setting($object->nid, 'minitheme_nodes')) {
    $vars['classes_array'][] = "gkplus-minitheme";
  }
}

/**
 * Implements hook_preprocess_HOOK for taxonomy-term.tpl.php.
 *
 * Adds nodeorder admin link to terms for admin on gking site only.
 *
 * @ingroup nodeorder
 */
function gkplus_preprocess_taxonomy_term(&$vars) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $tid = $vars['term']->tid;
  if (os_taxonomy_count_attached_nodes($tid) < 2) {
    return;
  }
  if (!(module_exists('nodeorder') || !spaces_access_admin())) {
    return;
  }

  ctools_include('ajax');
  ctools_include('modal');

  $vars['title_prefix'] = "<span class='term-admin-links'>"
    . ctools_modal_text_button(t('Sort Section'), "taxonomy/nojs/nodeorder/$tid", t('Sort Section'), "term-admin-link term-admin-sort-link")
    . "</span>";
}

/**
 * Implements hook_preprocess_HOOK for theme_os_taxonomy_tagged_nodes().
 *
 * @ingroup term_display_options
 */
function gkplus_preprocess_os_taxonomy_tagged_nodes(&$vars) {
  if (!_gkplus_check_purl()) {
    return;
  }
  if (!isset($vars['taxonomy_term']->tid) || !isset($vars['taxonomy_term']->vid)) {
    return;
  }
  $vocab = taxonomy_vocabulary_load($vars['taxonomy_term']->vid);
  if ($vocab->name !== 'Research Interests') {
    return;
  }
  if (!isset($vars['options']['attributes']['class'])) {
    $vars['options']['attributes']['class'] = array();
  }
  // Removes gkplus term attributes from options for child terms.
  else {
    $original = $vars['options']['attributes']['class'];
    $remove = array('gkplus-hidden-heading', 'gkplus-child-indent', 'gkplus-no-indent');
    $vars['options']['attributes']['class'] = array_diff($original, $remove);
  }
  if (_gkplus_entity_setting($vars['taxonomy_term']->tid, 'hidden_heading_terms')) {

    $vars['options']['attributes']['class'][] = 'gkplus-hidden-heading';
  }
  if (_gkplus_entity_setting($vars['taxonomy_term']->tid, 'child_indent_terms')) {
    $vars['options']['attributes']['class'][] = 'gkplus-child-indent';
  }
  else {
    $vars['options']['attributes']['class'][] = 'gkplus-no-indent';
  }
}

/**
 * Page callback; updates a node that has an attached file with the same name.
 *
 * @param string $filename
 * @param bool $return
 *
 * @ingroup updatefile
 */
function gkplus_update_filefield_page($filename, $return = FALSE) {
  $source_uri = 'public://gking/tmpdir/' . $filename;
  $dest_uri = 'public://gking/files/' . $filename;

  // First makes sure we have a file to copy to.
  $fid = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uri', $dest_uri, '=')
    ->range(0, 1)
    ->orderBy('fid', 'DESC')
    ->execute()
    ->fetchField();
  if ($fid === FALSE) {
    print t("Error: No existing file found at <em>@destination</em>", array('@destination' => $dest_uri));
    exit();
  }

  // Copies the unmanaged file from tmpdir to the files dir.
  $source_filepath = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . '/gking/tmpdir/' . $filename;
  $file = file_unmanaged_copy($source_filepath, $dest_uri, FILE_EXISTS_REPLACE);
  if ($file === FALSE) {
    print t("Error: Could not copy file: <em>@destination</em>", array('@destination' => $dest_uri));
    if (!$return) {
      exit();
    }
    return FALSE;
  }

  // Updates the file table to reflect new timestamp and filesize.
  $realpath = drupal_realpath($dest_uri);
  $filesize = filesize($realpath);
  $timestamp = time();
  db_update('file_managed')
    ->fields(array('filesize' => $filesize, 'timestamp' => $timestamp))
    ->condition('fid', $fid, '=')
    ->execute();

  print t("Successfully updated file: <em>@filename</em>", array('@filename' => $filename));
  if (!$return) {
    exit();
  }
  return TRUE;
}

/**
 * Returns whether a file exists in the temp directory.
 *
 * @ingroup updatefile
 */
function gkplus_access_file($filename) {
  $temp_path = _gkplus_temp_path();
  $filepath = $temp_path . $filename;
  return file_exists($filepath);
}

/**
 * Cron callback; attempts to upload any system file updated since last cron.
 *
 * @see gkplus_cron()
 *
 * @ingroup updatefile
 */
function _gkplus_updatefile_cron() {
  $last_update = variable_get('gkplus_last_updated_filefields', 0);
  $temp_path  = _gkplus_temp_path();
  if ($handle = opendir($temp_path)) {
    while (FALSE !== ($file = readdir($handle))) {
      $filepath = $temp_path . $file;
      drupal_set_message("found file " . $filepath . "\nfilectime: " . filectime($filepath) . "\nlast update: " . $last_update, "warning");
      if (filectime($filepath) >= $last_update && is_file($filepath) && !(strpos($file, '.') === 0)) {
        gkplus_update_filefield_page($file, TRUE);
      }
    }
    closedir($handle);
  }
  variable_set('gkplus_last_updated_filefields', time());
}

/**
 * Returns TRUE if the node is set to use the custom setting.
 *
 * @param int $etid
 *   The entity ID of the node or term about to be viewed.
 * @param string $setting
 *   The variable name to test this entity for membership of; one of
 *   "minitheme_nodes", "hidden_heading_terms", or "child_indent_terms".
 *
 * @ingroup term_display_options
 */
function _gkplus_entity_setting($etid, $setting) {
  $variable_name = 'gkplus_' . $setting;
  $etids = variable_get($variable_name, array());
  return in_array($etid, $etids);
}

/**
 * Updates an array of entity IDs to add or remove this entity ID for a setting.
 *
 * @param int $etid
 *   The entity ID, a node or taxonomy term that was just updated.
 * @param string $option
 *   The option in question, one of "minitheme_nodes", "hidden_heading_terms",
 *   or "child_indent_terms".
 * @param int $value
 *   The checkbox value, 0 or 1.
 *
 * @ingroup term_display_options
 */
function _gkplus_entity_setting_update($etid, $setting, $value) {
  $variable_name = 'gkplus_' . $setting;
  $etids = variable_get($variable_name, array());
  // Adds the entity if the value is 1 and the entity is not yet saved as such.
  if ($value && !in_array($etid, $etids)) {
    $etids[] = $etid;
    variable_set($variable_name, $etids);
  }
  // Removes the entity if the value is 0 and the entity is not yet removed.
  else if (!$value && in_array($etid, $etids)) {
    unset($etids[array_search($etid, $etids)]);
    variable_set($variable_name, $etids);
  }
}

/**
 * Returns the directory filepath for the automatic updatefile directory.
 *
 * @ingroup updatefile
 */
function _gkplus_temp_path() {
  $temp_dir    = variable_get('gking_script_tmpdir', "/gking/tmpdir/");
  $files_dir   = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
  $temp_path   = $files_dir . $temp_dir;

  return $temp_path;
}

/**
 * Returns TRUE if the purl of the current vsite is "gkplus".
 */
function _gkplus_check_purl($purl = 'gking') {
  $vsite = vsite_get_vsite();
  return ($vsite && $vsite->group->purl == $purl);
}
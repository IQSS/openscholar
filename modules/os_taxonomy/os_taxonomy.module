<?php

/**
 * @file
 * taxonomy terms API for OpenScholar.
 */

/**
 * Return generated item list of the terms.
 */
function os_taxonomy_vocabulary_term_list($vid, $options = array()) {
  $vocabulary = taxonomy_vocabulary_load($vid);
  $options += array(
    'range' => 10,
    'offset' => 0,
    'depth' => NULL,
    'bundles' => array(),
    'count_items' => TRUE,
    'add_childs' => TRUE,
    'show_empty_terms' => TRUE,
    'link_to_empty_terms' => TRUE,
    'include_terms_description' => TRUE,
    'apply_link_active_css_class' => TRUE,
  );

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->range($options['offset'], $options['offset'] + $options['range'])
    ->propertyOrderBy('name')
    ->execute();

  if (empty($result['taxonomy_term'])) {
    return;
  }

  $data = array();

  $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
  foreach ($terms as $tid => $term) {
    $tree = taxonomy_get_tree($vid, $term->tid, $options['depth']);
    $items[$tid] = array(
      'term_name' => check_plain($term->name),
      'description' => check_plain($term->description),
      'tree' => $tree,
      'tagged_items' => os_taxonomy_count_term_tagged_items($tid, $options['bundles']),
      'child_number' => os_taxonomy_count_term_tagged_items($tree, $options['bundles']),
      'url' => entity_uri('taxonomy_term', $term),
    );
  }

  foreach($items as $tid => $item) {
    // Skip on this if we don't dispaly empty childs term.
    if (!$options['show_empty_terms'] && !$item['tagged_items'] == 0 && !$item['child_number'] == 0) {
      continue;
    }

    $name = l($item['term_name'], $item['url']['path']);
    $desciption = '';

    // The attached number to the term name.
    $number = $item['tagged_items'];
    if ($options['add_childs']) {
      $number += $item['child_number'];
    }

    // Check if we need to disable the link to the term base on the child number.
    if (!$number && !$options['link_to_empty_terms']) {
      $name = $item['term_name'];
    }

    // Adding number to the term name.
    if ($options['count_items']) {
      $name .= $number ? ' (' . $number . ')' : '';
    }

    if ($options['include_terms_description'] && !empty($item['description'])) {
      $desciption = '<br />  - ' . $item['description'];
    }

    $data[] = array(
      'data' => $name . $desciption,
    );
  }

  $body = theme('item_list', array('type' => 'ul', 'items' => $data));

  return $body;
}

/**
 * Return the number of the tagged items to the term.
 */
function os_taxonomy_count_term_tagged_items($tid, $node_bundles = array()) {
  $items_number = 0;

  if (is_array($tid)) {
    foreach ($tid as $term) {
      $items_number += os_taxonomy_count_attached_nodes($term->tid, $node_bundles);
    }
  }
  else {
    $items_number = os_taxonomy_count_attached_nodes($tid, $node_bundles);  }

  return $items_number;
}

/**
 * Return an query object for nodes that attached to term.
 */
function os_taxonomy_count_attached_nodes_query_object($tid, $node_bundles = array()) {
  $query = db_select('taxonomy_index', 't');
  $query->condition('tid', $tid)
    ->distinct()
    ->fields('t');

  if (!empty($node_bundles)) {
    $query->join('node', 'n', 't.nid = n.nid');
    $query->condition('n.type', $node_bundles, 'IN');
  }

  return $query;
}

/**
 * Count the number of attached node to the taxonomy.
 */
function os_taxonomy_count_attached_nodes($tid, $node_bundles = array()) {
  $query = os_taxonomy_count_attached_nodes_query_object($tid, $node_bundles);

  return $query
    ->countQuery()
    ->execute()
    ->fetchAssoc();
}

/**
 * Return the nodes id that tagged to a taxonomy term.
 */
function os_taxonomy_list_attached_nodes($tid, $node_bundles = array()) {
  $query = os_taxonomy_count_attached_nodes_query_object($tid, $node_bundles);

  $result = $query->execute();
  $nids = array();
  while($record = $result->fetchAssoc()) {
    $nids[$record['nid']] = $record['nid'];
  }

  return array_keys($nids);
}

/**
 * Return generated item list of a nodes tagged to the term.
 */
function os_taxonomy_show_taxonomy_term_tagged_node($taxonomy_term, $options = array()) {
  $options += array(
    'show_term_description' => FALSE,
    'show_tagged_nodes_child_element' => TRUE,
  );

  $nodes = os_taxonomy_list_attached_nodes($taxonomy_term->tid);

  $title = check_plain($taxonomy_term->name);
  $title .= $options['show_term_description'] ? '<br />' . check_plain($taxonomy_term->description) : '';

  if ($options['show_tagged_nodes_child_element']) {
    $childrens = taxonomy_get_tree($taxonomy_term->vid, $taxonomy_term->tid);

    foreach ($childrens as $children) {
      $attached_nodes = os_taxonomy_list_attached_nodes($children->tid);
      foreach ($attached_nodes as $attached_node) {
        $nodes[] = $attached_node;
      }
    }
  }

  $nodes = node_load_multiple(array_unique($nodes));

  $data = null;
  foreach ($nodes as $node) {
    $items[] = array(
      'data' => $node->title,
    );
  }

  $body = theme('item_list', array('type' => 'ul', 'title' => $title, 'items' => $items));

  return $body;
}

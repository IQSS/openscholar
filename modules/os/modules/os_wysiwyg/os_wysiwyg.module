<?php

/**
 * @file
 */

/**
 * Scan the body of the post for any media tags
 * If we find any, update those files with the nid of this post
 * Enter description here .
 * ..
 *
 * @param unknown_type $node
 */
function os_wysiwyg_update_files($node){

  // get the list of files already in this node
  $result = db_select('file_usage', 'f')
  ->fields('f', array('fid', 'module', 'type', 'id', 'count'))
  ->condition('module', 'os_wysiwyg')
  ->condition('type', 'node')
  ->condition('id', $node->nid)
  ->condition('count', 0, '>')
  ->execute();
  $curr_files = array();
  foreach ($result as $usage) {
    $curr_files[$usage->fid] = $usage->count;
  }

  if (isset($node->body['und'][0]['value'])) {

    $matches = array();
    if (preg_match_all("/\[\[.*?\]\]/s", $node->body['und'][0]['value'], $matches)) {

      $matches = $matches[0];
      $matches = str_replace("[[", "", $matches);
      $matches = str_replace("]]", "", $matches);
      foreach ( $matches as $tag ) {

        if (!is_string($tag)) {
          continue;
        }

        $tag_info = drupal_json_decode($tag);
        if($tag_info['type'] == 'media' && $tag_info['fid'] && ($file = file_load($tag_info['fid']))){
          if(isset($curr_files[$tag_info['fid']]) && $curr_files[$tag_info['fid']] > 0){
            //This entry already exists do nothing
            $curr_files[$usage->fid]--;
          }else{
            //Increment file usage reference
            file_usage_add($file, 'os_wysiwyg', 'node', $node->nid);
          }
        }
      }
    }
  }

  //Delete no longer used file references
  foreach ( $curr_files as $fid => $count ) {
    if($count > 0){
      $file = file_load($fid);
      file_usage_delete($file, 'os_wysiwyg', 'node', $node->nid, $count);
    }
  }
}

function os_wysiwyg_node_insert($node){
  os_wysiwyg_update_files($node);
}

function os_wysiwyg_node_update($node){
  os_wysiwyg_update_files($node);
}

function os_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context){

  // settings there are no UI options for
  $settings['gecko_spellcheck'] = true;
  drupal_add_css(drupal_get_path('module', 'os_wysiwyg') . '/os_wysiwyg.css');

  // reorder buttons
  // TODO: remove when WYSIWYG module can do this for us

  // format select buttons
  $btns = explode(',', $settings['theme_advanced_buttons1']);
  $format_start = array_search('formatselect', $btns);
  $selects = array_splice($btns, $format_start, 4);
  $format_start = array_search('pasteword', $btns);
  array_splice($btns, $format_start, 0, $selects);

  // toggle toolbar button
  $toggle_start = array_search('pdw', $btns);
  $toggle = array_splice($btns, $toggle_start, 1);
  array_splice($btns, $format_start, 0, $toggle);

  $toolbarStart = array_search('pdw', $btns) + 1;
  $settings['theme_advanced_buttons2'] = implode(',', array_splice($btns, $toolbarStart));
  $settings['theme_advanced_buttons1'] = implode(',', $btns);

  // pdw settings
  $settings['pdw_toggle_toolbars'] = '2,3,4';
  $settings['pdw_toggle_on'] = 1;
}

/**
 * Implements hook_media_browser_plugins_alter.
 * Removes the default library from the Media browser. A View has replaced it.
 */
function os_wysiwyg_media_browser_plugins_alter(&$plugins){
  unset($plugins['library']);
}

/**
 * Adds the pdw plugin to the wysiwyg
 */
function os_wysiwyg_wysiwyg_include_directory($type){
  if ($type == 'plugins') {
    return $type;
  }
}

/**
 * Implements hook_element_info_alter
 *
 * Adds a prerender to the text_format element
 */
function os_wysiwyg_element_info_alter(&$elements) {
  $elements['text_format']['#pre_render'][] = 'os_wysiwyg_format_toggle';
}

function os_wysiwyg_format_toggle($element) {
  $element['#attached']['js'][] = drupal_get_path('module', 'os_wysiwyg').'/os_wysiwyg.js';
  return $element;
}
<?php

/**
 * @file
 * OS Activity module file.
 */
include_once 'os_activity.features.inc';

/**
 * Implements hook_node_insert().
 */
function os_activity_node_insert($node) {
  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }
  os_activity_message_node_create($node, 'insert');
}

/**
 * Implements hook_node_update().
 */
function os_activity_node_update($node) {
  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }
  os_activity_message_node_create($node, 'update');
}

/**
 * Implements hook_message_view().
 *
 * Register a message when it is viewed.
 */
function os_activity_message_view($message, $view_mode, $langcode) {
  os_acitvity_register_message($message);
}

/**
 * Implements hook_views_pre_render().
 *
 * Register a message when it is viewed. Views might not render the full
 * Message entity, so we have to look if the base table of the view is
 * {message}.
 */
function os_activity_views_pre_render(&$view) {
  if ($view->base_table != 'message' || empty($view->result)) {
    return;
  }

  if ($view->name == 'os_activity') {
    drupal_add_css(drupal_get_path('module', 'os_activity') . '/css/os_activity.css');
  }

  $mids = array();
  foreach ($view->result as $item) {
    $mids[$item->mid] = $item->mid;
  }

  $messages = message_load_multiple($mids);
  foreach ($messages as $message) {
    os_acitvity_register_message($message);
  }
}

/**
 * Register a viewed message by group ID.
 *
 * @param $message
 *   The message entity.
 *
 * @return
 *   If $mid is empty, function will return the registered message
 *   IDS.
 */
function os_acitvity_register_message(Message $message = NULL) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (empty($message)) {
    return $cache;
  }

  if (!empty($message) && !isset($message->field_group)) {
    // Message is not related to a specific group.
    return;
  }

  // We don't use a wrapper for performance reasons.
  $gid = $message->field_group[LANGUAGE_NONE][0]['target_id'];
  if (empty($cache[$gid])) {
    $cache[$gid] = $message->mid;
  }

  if ($message->mid > $cache[$gid]) {
    $cache[$gid] = $message->mid;
  }
}

/**
 * Implements hook_exit().
 */
function os_activity_exit() {
  if (!$cache = os_acitvity_register_message()) {
    return;
  }
  $user_gids = og_get_entity_groups();
  if (empty($user_gids['node'])) {
    return;
  }

  $og_memberships = og_membership_load_multiple(array_keys($user_gids['node']));

  foreach ($cache as $gid => $mid) {
    // Get the OG membership ID.
    $id = array_search($gid, $user_gids['node']);
    $wrapper = entity_metadata_wrapper('og_membership', $og_memberships[$id]);

    if (!$wrapper->field_message->value() || $mid > $wrapper->field_message->value()) {
      // Save the last message.
      $wrapper->field_message->set($mid);
    }
  }
}

/**
 * Helper function; Create a message when a node is created or updated.
 */
function os_activity_message_node_create($node, $op) {
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $action = $op == 'insert' ? t('posted') : t('edited');
  $values = array(
    'uid' => $node->uid,
    'arguments' => array(
      '@action' => $action,
    ),
  );

  $message = message_create('os_node', $values);
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_reference->set($node);

  // Set reference to the group.
  $group_wrapper = og_is_group('node', $node) ? $node : $node_wrapper->{OG_AUDIENCE_FIELD}->get(0);
  $wrapper->field_group->set($group_wrapper->value());

  $is_private = (int) $group_wrapper->{OG_ACCESS_FIELD}->value();
  $wrapper->field_private_message->set($is_private);
  $wrapper->save();
}

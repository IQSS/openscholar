<?php

/**
 * @file
 * OS Activity module file.
 */
include_once 'os_activity.features.inc';

/**
 * Implements hook_node_insert().
 */
function os_activity_node_insert($node) {
  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }
  os_activity_message_node_create($node, 'insert');
}

/**
 * Implements hook_node_update().
 */
function os_activity_node_update($node) {
  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }
  os_activity_message_node_create($node, 'update');
}

/**
 * Return the message owner name acording to the virtual site configuration.
 *
 *  @param $message
 *    The message object.
 */
function os_activity_message_owner_name(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);

  // The virtual site owner can decide of he want to present the username or the
  // virtual site name as the message owner.
  if ($wrapper->field_node_reference->author->og_user_node->get(0)->field_message_display_name->value() == 'username') {
    $display_name = $wrapper->field_node_reference->author->label();
  }
  else {
    $display_name = $wrapper->field_node_reference->author->og_user_node->get(0)->label();
  }

  return $display_name;
}

/**
 * Helper function; Create a message when a node is created or updated.
 */
function os_activity_message_node_create($node, $op) {
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $action = $op == 'insert' ? t('posted') : t('edited');
  $values = array(
    'uid' => $node->uid,
    'arguments' => array(
      '@action' => $action,
    ),
  );

  $message = message_create('os_node', $values);
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_reference->set($node);

  $is_private = $node_wrapper->{OG_AUDIENCE_FIELD}->get(0)->{OG_ACCESS_FIELD}->value() ? 1 : 0;
  $wrapper->field_private_message->set($is_private);
  $wrapper->save();
}

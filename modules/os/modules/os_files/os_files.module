<?php

/**
 * @file
 * OS File module main module file.
 */

define('OS_FILE_FILEPATH_MULTITENANT', '[vsite:site-purl]/files');
define('OS_FILE_FILEPATH_SINGLETENANT', 'share');

/**
 * Implements hook_menu().
 */
function os_files_menu() {
  $items = array();

  $items['files/%'] = array(
    'title' => 'File download',
    'page callback' => 'os_files_download',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Return a "Coppy to clip-board" link using clippy library.
 *
 *  @param $url_file
 *    The url the user will coppy.
 *
 *  @param $options
 *    array of options for styling the button
 *      - bgcolor: Background color.
 *      - width: The width of the wrapper for the button and the text.
 *      - height: The height of the wrapper for the button and the text.
 */
function os_files_clippy($url_file, $options = array()) {
  global $base_url;

  // Default values of the button style.
  $options += array(
    'bgcolor' => '',
    'height' => 20,
    'width' => 110,
  );

  // Location of the flash file.
  $library = libraries_get_path('clippy');
  $path = $base_url . '/' . $library . '/build/clippy.swf';

  // Print out the copy button.
  $html = '
    <object
      classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
      width="' . $options['height'] . '"
      height="'. $options['width'] .'"
      id="clippy">
        <param name="movie" value="' . $path . '"/>
        <param name="allowScriptAccess" value="always" />
        <param name="quality" value="high" />
        <param name="scale" value="noscale" />
        <param NAME="FlashVars" value="text=' . $url_file . '">
        <param name="bgcolor" value=" ' . $options['bgcolor'] . '">
        <embed
          src="'. $path . '"
          width="' . $options['width'] . '"
          height="' . $options['height'] . '"
          name="clippy"
          quality="high"
          allowScriptAccess="always"
          type="application/x-shockwave-flash"
          pluginspage="http://www.macromedia.com/go/getflashplayer"
          FlashVars="text=' . $url_file . '"
          bgcolor="' . $options['bgcolor'] . '"
        />
    </object>
  ';
  return $html;
}

/**
 * Implements hook_os_add_new_links_alter().
 *
 * Adds a page contextual link for importing biblio nodes.
 */
function os_files_os_add_new_links_alter(&$links) {
  $item = menu_get_item();

  if (!in_array($item['path'], array('file-list', 'file/%', 'file/%/edit'))) {
    return;
  }

  $links['add_new_file'] = array(
    'title' => t('Add file'),
    'href' => 'file/add',
    'html' => TRUE,
  );
}

/**
 * Submit handler - the module media has it's own redirect path in his submit
 * handler. This submit handler will be called after the media module handler
 * and change the redirect path.
 */
function os_files_redirect_after_upload($form, &$form_state) {
  $form_state['redirect'] = 'file-list';
}

/**
 * Implements hook_views_api().
 */
function os_files_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'os_files') . '/includes/views',
  );
}

/**
 * Implements hook_file_insert().
 */
function os_files_file_insert($file) {
  if ($context = og_context()) {
    $file->skip_og_membership = TRUE;
    og_group('node', $context['gid'], array('entity_type' => 'file', 'entity' => $file));
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set the URI schema to private when adding a new file via file/add.
 *
 * @see media_add_upload_submit()
 */
function os_files_form_media_add_upload_alter($form, &$form_state) {
  $item = menu_get_item();
  if ($item['path'] != 'file/add') {
    return;
  }
  $form_state['build_info']['args'][0]['uri_scheme'] = 'private';

  $form['#submit'][] = 'os_files_redirect_after_upload';
}

/**
 * Implements hook_og_permission().
 */
function os_files_og_permission() {
  return array(
    'administer site files' => array(
      'title' => t('Manage site files'),
      'description' => t('Manage the files for the site.'),
    ),
  );
}

/**
 * Access callback;Determine if the user can manage the files entity for
 * a VSite.
 */
function os_files_file_list() {
  if (!$space = spaces_get_space()) {
    return;
  }

  return og_user_access('node', $space->id, 'administer files');
}

/**
 * Entry point for vsite aliased file downloads.
 */
function os_files_download() {
  $args = func_get_args();

  if (module_exists('vsite')) {
    $prefix = vsite_get_purl();
    if ($prefix) {
      // Add the prefix as an arg.
      array_unshift($args, $prefix);
    }
  }

  // Use the public schema.
  array_unshift($args, 'public');

  // Serve the file via the standard download handler.
  call_user_func_array('file_download',$args);
}

/**
 * File Settings.
 */
function os_files_media_browser_params_alter(&$media_params) {

  // Are we in multi-tenant? get the file path.
  if (spaces_get_space()) {
    $filepath = OS_FILE_FILEPATH_MULTITENANT;
  }
  else {
    $filepath = OS_FILE_FILEPATH_SINGLETENANT;
  }

  if (!empty($filepath) && (empty($media_params['file_directory']) || !strstr($media_params['file_directory'], $filepath))) {
    if (!empty($media_params['file_directory'])) {
      // Prepend the file path.
      $media_params['file_directory'] = $filepath."/".$media_params['file_directory'];
    }
    else{
      // Set the default file path.
      $media_params['file_directory'] = $filepath;
    }
  }
}

/**
 * Implements hook_stream_wrappers_alter().
 *
 * Used to extend the public stream wrapper.
 *
 * @param array $wrappers
 */
function os_files_stream_wrappers_alter(&$wrappers) {
  // Use OS Stream Wrapper.
  if (isset($wrappers['public'])) {
    $wrappers['public']['class'] = 'OSPublicStreamWrapper';
  }
}

/**
 * Implements hook_file_download().
 *
 * Serve public files from a vsite directory.
 */
function os_files_file_download($uri) {
  global $user;
  $path = file_uri_target($uri);
  $scheme = file_uri_scheme($uri);

  if ($scheme != 'public' || !module_exists('vsite')) {
    return NULL;
  }

  if ($files = file_load_multiple(array(), array('uri' => $uri))) {
    foreach ($files as $file) {
      $wrapper = entity_metadata_wrapper('file', $file);
      if (!isset($wrapper->{OG_AUDIENCE_FIELD}) || !$gid = $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE))) {
        continue;
      }

      if (!og_is_member('node', $gid[0])) {
         if (function_exists('pinserver_check_status') && !pinserver_check_status()) {
           // Maybe user is site owner,  but has not logged in locally or via the pinserver, so send to pinserver.
           return pinserver_redirect();
         }
        return -1;
      }
    }
  }

  $prefix = vsite_get_purl();

  // Public file access for vsite paths.
  if (strpos($path, $prefix.'/') === 0) {

    // Get the file record based on the URI. If not in the database just return.

    if (count($files)) {
      foreach ($files as $item) {
        // Since some database servers sometimes use a case-insensitive
        // comparison by default, double check that the filename is an exact
        // match.
        if ($item->uri === $uri) {
          $file = $item;
          break;
        }
      }
    }
    if (!isset($file)) {
      return;
    }

    return file_get_content_headers($file);
  }
}

/**
 * Implements hook_views_alter().
 *
 * Adds necessary relationship and filters to Media Browser view to make it
 * work with spaces.
 */
function os_files_views_default_views_alter(&$views) {
  if (module_exists('vsite') && isset($views['media_default'])) {
    $view = $views['media_default'];

    //Link in Files related via file_usage
    $view->add_item('default', 'filter', 'spaces', 'current');
  }
}

/**
 * Media Gallery adds some fields to every file bundle. We don't want one of
 * them.
 */
function os_files_modules_installed($modules) {
  if (in_array('media_gallery', $modules)) {
    _os_files_clean_up_fields();
  }
}

/**
 * Remove field_license because no one will use it
 * Add title and description to file types media_gallery didn't add them to
 */
function _os_files_clean_up_fields() {
  field_delete_field('field_license');
  if ($title = field_info_field('media_title')) {
    $descrip = field_info_field('media_description');
    $file_types = file_info_file_types();
    foreach ($file_types as $bundle => $info) {
      if (!field_info_instance('file', 'media_title', $bundle)) {
        $title_copy = $title;
        $title_copy += array(
          'entity_type' => 'file',
          'bundle' => $bundle,
        );
        field_create_instance($title_copy);
      }

      if (!field_info_instance('file', 'media_description', $bundle)) {
        $descrip_copy = $descrip;
        $descrip_copy += array(
          'entity_type' => 'file',
          'bundle' => $bundle,
        );
        field_create_instance($descrip_copy);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 * Formatter that splits images into its own list Used in conjunction with
 * jCarousel.
 */
function os_files_field_formatter_info() {
  $formatters = array();

  $formatters['os_files_image_list'] = array(
    'label' => t('Images as Separate List'),
    'field types' => array('file'),
    'multiple values' => FIELD_BEHAVIOR_DEFAULT,
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 *
 * This formatter renders a list of files as two elements:
 *  1. A list of images
 *  2. A table of everything else
 */
function os_files_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array(
    '#type' => 'markup',
    '#theme' => '',
    '#attributes' => array(
      'class' => array('field-items'),
    ),
  );
  switch ($display['type']) {
    case 'os_files_image_list':
      $images = array();
      $other = array();
      foreach ($items as $i) {
        if ($i['type'] == 'image') {
          $title = field_get_items('file', (object)$i, 'media_title');
          $title = isset($title[0])?$title[0]['value']:'';
          $alt = field_get_items('file', (object)$i, 'media_description');
          $alt = isset($alt[0])?$alt[0]['value']:'';
          $image_info = image_get_info($i['uri']);
          $images[] = array(
            'href' => file_create_url($i['uri']),
            'title' => theme('image_style', array(
              'path' => $i['uri'],
              'style_name' => 'thumbnail',
              'title' => $title,
              'alt' => $alt,
              'width' => $image_info['width'],
              'height' => $image_info['height'],
            )),
            'html' => TRUE,
          );
        }
        else {
          $extension = strtolower(substr(strrchr($i['filename'], '.'), 1));
          $href = file_create_url($i['uri']);
          $text = $i['description'] ? $i['description'] : $i['filename'];
          $other[] = array(
            array(
              'data' => theme('file_icon', array('file' => (object)$i)),
              'class' => array('mime', 'mime-'.$extension),
            ),
            array(
              'data' => l($text, $href),
              'class' => array('file'),
            ),
            array(
              'data' => format_size($i['filesize']),
              'class' => array('size'),
            ),
          );
        }
      }

      $elements['images'] = array(
        '#theme' => 'links',
        '#links' => $images,
        '#attributes' => array(
          'class' => array(
            'os-files-image-list',
            'jcarousel-skin-default',
          ),
        ),
      );
      if (module_exists('jcarousel')) {
        $elements['images']['#pre_render'][] = 'os_files_jcarousel_add';
      }
      $elements['other'] = array(
        '#theme' => 'table',
        '#rows' => $other,
        '#header' => array(),
        '#attributes' => array(
          'class' => array(
            'os-files-other-list',
          ),
        ),
      );
    break;
  }

  return $elements;
}

function os_files_jcarousel_add($elements) {
  jcarousel_add('os-files-image-list');
  return $elements;
}

/**
 * Implements hook_views_data_alter().
 *
 * Adds file_managed as a table the pseudo-table spaces can be joined to.
 * This enables files to use the spaces_current_space filter
 */
function os_files_views_data_alter(&$data) {
  $data['spaces']['table']['join']['file_managed'] = array(
    'left_field' => 'fid',
    'field' => 'id',
  );
}

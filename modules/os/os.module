<?php

/**
 * @file
 * Openscholar module file.
 */
include_once ('os.features.inc');

/**
 * Implementation of hook_menu().
 */
function os_menu() {
  $items = array();

  $items['home'] = array(
    'type' => MENU_CALLBACK,
    'title' => '',
    'page callback' => 'os_frontpage',
    'file' => 'os.pages.inc',
    'access arguments' => array('access content'),
    'weight' => 0,
  );

  // nodeautocomplete callback.
  $items['os/node/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'os_node_autocomplete',
    'page callback' => 'os_node_autocomplete',
    'file' => 'os.autocomplete.inc',
    'access arguments' => array('access content'),
    'file path' => drupal_get_path('module', 'os') . '/',
  );

  $items['admin/config/openscholar'] = array(
    'title' => 'Openscholar Settings',
    'description' => 'Administer OpenScholar specific settings.',
    'position' => 'left',
    'weight' => - 5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_settings_form'),
    'access arguments' => array('administer content'),
  );

  $items['page_not_found'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'os.pages.inc',
    'page callback' => 'os_page_not_found_page',
    'file path' => drupal_get_path('module', 'os') . '/',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation of hook menu_alter().
 */
function os_menu_alter(&$items) {
  if (isset($items['user'])) {
    $items['user']['page callback'] = 'os_user_page';
    $items['user']['file'] = 'os.pages.inc';
    $items['user']['file path'] = drupal_get_path('module', 'os');
  }
}

/**
 * Return the avalible bundles based on the privacy
 *
 * @param $privacy
 *  Can be array:
 *    - 0: disabled
 *    - 2: private
 *    - 1: public
 *  TRUE returns all
 *
 * @param $space_type
 * @param $reset
 *   (reset features cache)
 *
 * @return
 *  Array keyed with the bundle ID and the bundle name as value.
 */
function os_get_bundles($privacy = array(1), $space_type = 'og', $reset = FALSE) {
  $ret_all = FALSE;
  if (is_bool($privacy) && $privacy) {
    $ret_all = TRUE;
  }
  elseif (!is_array($privacy)) {
    $privacy = array($privacy);
  }

  $bundles = array();

  // Reset static feature list.
  $features = spaces_features($space_type, $reset);
  $site_features = variable_get('spaces_features', array());

  foreach ($features as $name => $feature) {
    $info = $feature->info['features'];
    if (isset($info['node']) && ($ret_all || (isset($site_features[$name]) && in_array($site_features[$name], $privacy)))) {

      // Get bundle name, we call the node_info hook directly since
      // this is called during bootstrap
      module_load_include('features.inc', $name);
      if (function_exists($name . '_node_info')) {
        $ni = $name . '_node_info';
        $node_info = $ni();
      }

      foreach ( $info['node'] as $nodetype ) {
        if (isset($node_info[$nodetype]['name'])) {
          $bundles[$nodetype] = $node_info[$nodetype]['name'];
        }
        else {
          $bundles[$nodetype] = $feature->info['name'];
        }
      }
    }
  }

  return $bundles;
}

/**
 * Implements hook_block_info().
 */
function os_block_info() {
  ctools_include('menu', 'os');

  $blocks['powered-by'] = array(
    'info' => t('Powered by Openscholar'),
    'weight' => '10',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['login'] = array(
    'info' => t('Login Button'),
    'weight' => '10',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['get-started'] = array(
    'info' => t('Get Started - A block to help site admins setup thier site.'),
    'weight' => '-10',
    'cache' => DRUPAL_NO_CACHE,
  );

  // System-defined menu blocks.
  foreach (os_get_menus() as $menu_name => $title) {
    $blocks[$menu_name]['info'] = t($title);
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks[$menu_name]['cache'] = DRUPAL_NO_CACHE;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generate a block with a promotional link to openscholar.harvard.edu and
 * all os menu blocks.
 */
function os_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'powered-by' :
      $block['subject'] = NULL;
      $block['content'] = theme('openscholar_powered_by');
      return $block;

    case 'login' :
      $block['subject'] = NULL;
      $block['content'] = theme('openscholar_login');
      return $block;

    case 'get-started' :
      if (user_access('manage group space')) {
        $block['subject'] = NULL;
        $block['content'] = theme('openscholar_get_started');
      }
      return $block;

    default:
      // All os menu blocks.
      ctools_include('menu', 'os');
      $os_menus = os_get_menus();
      if (isset($os_menus[$delta])) {
        $block['content'] = os_menu_tree($delta);
        return $block;
      }
      break;
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Tells OS menu blocks to use nice menus theme. This would happen in
 * os_block_view, but the region isn't available yet there.
 */
function os_block_view_alter(&$block, &$data) {
  ctools_include('menu', 'os');

  if (array_key_exists($data->delta, os_get_menus()) && count($block['content'])) {
    $block['content'] += array(
      '#theme' => 'os_nice_menus',
      '#menu_name' => $data->delta,
      '#region' => $data->region,
    );
  }
}

/**
 * Implements hook_theme().
 *
 * Applies nice_menus themes to our menus.
 */
function theme_os_nice_menus($variables) {
  ctools_include('menu', 'os');
  ctools_include('layout', 'os');

  $variables += array(
    // 'down' get from region
    'direction' => _os_nice_menus_direction($variables['region']),
    // variable?
    'depth' => variable_get('os_use_dropdowns', 1) ? -1 : 0,
    // or just use this?
    'menu' => os_menu_tree_data($variables['menu_name']),
  );

  // Has to be nice_menus. the rest won't take a direction.
  $block = theme('nice_menus', $variables);

  return $block['content'];
}

/**
 * Given a menu returns the direction for menu tabs to use
 *
 * @param $region
 *  Region containing menu to expand.
 *
 * @return
 *  'right' or 'down' value for direction parameter of theme_nice_menus.
 */
function _os_nice_menus_direction($region) {
  ctools_include('themes', 'os');
  $region_directions = array(
    'three_col_grail' => array(
      'sidebar_first' => 'right',
      'sidebar_second' => 'left',
      'footer' => 'up',
    ),
    'two_sidebars_right' => array(
      'sidebar_first' => 'left',
      'sidebar_second' => 'left',
      'footer' => 'up',
    ),
    'two_sidebars_left' => array(
      'sidebar_first' => 'right',
      'sidebar_second' => 'right',
      'footer' => 'up',
    ),
  );

  $settings_var = 'theme_' . os_theme_get() . '_settings';
  if ($space = spaces_get_space()) {
    $columns = $space->controllers->variable->get($settings_var);
  }
  else {
    $columns = variable_get($settings_var, 'three_col_grail');
  }

  if (count($columns)) {
    $columns = $columns['bigscreen_layout'];
  }
  else {
    $columns = 'three_col_grail';
  }

  $directions = (isset($region_directions[$columns])) ? $region_directions[$columns] : $region_directions['three_col_grail'];
  return (isset($directions[$region])) ? $directions[$region] : 'down';
}

/**
 * Implements hook_os_widget().
 *
 * Builds cp widgets for the menus.
 */
function os_os_widget() {
  $blocks = array();
  ctools_include('menu', 'os');

  foreach ( os_get_menus() as $menu_name => $title ) {
    $blocks['os-' . $menu_name] = array(
      'module' => 'os',
      'info' => t($title),
      'delta' => $menu_name,
      // Menu blocks can't be cached because each menu item can have
      // a custom access callback. menu.inc manages its own caching.
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

function os_os_widget_alter(&$widget) {
  if ($widget['module'] == 'os') {
    $widget += array(
      'tags' => array('Other'),
      'class' => array('menu'),
    );
  }
  elseif ($widget['module'] == 'node') {
    $widget += array(
      'tags' => array('Content'),
    );
  }
}

/**
 * Implements hook_theme().
 */
function os_theme() {
  return array(
    'openscholar_powered_by' => array(
      'variables' => array(
        'elements' => array(),
      ),
    ),
    'openscholar_login' => array(
      'variables' => array(
        'link_text' => 'Login',
        'attributes' => array(
          'class' => 'footer-login',
        ),
      ),
    ),
    'openscholar_get_started' => array(
      'variables' => array(
        'elements' => array(),
      ),
    ),
    'os_nice_menus' => array(
      'variables' => array(
        'menu_name' => '',
        'region' => '',
      ),
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 *
 * Removes purl from hook_init's implementations queue since it was already run
 * during custom_theme.
 */
function os_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'init') {
    unset($implementations['purl']);
  }
  if ($hook == 'form_alter') {
    unset($implementations['os']);
    $implementations['os'] = FALSE;
  }
}

/**
 * Removes contextual links class from html.
 */
function os_preprocess_html(&$variables) {
  $variables['classes_array'] = array_diff($variables['classes_array'], array(
    'contextual-links-region',
  ));
}

/**
 * Implements hook_preprocess_page().
 */
function os_preprocess_page(&$variables) {
  $types = os_get_bundles();

  $links = array();
  $active = context_active_contexts();
  // Do nothing if we aren't in the cp.
  if (!isset($active['os_public']) || arg(0) == 'os') {
    return;
  }

  $is_front = isset($active['os_front']);
  $context = 'os_front';
  $module = 'os_front';

  foreach ( $types as $type => $name ) {
    $printed = $is_front;
    foreach ( $active as $a ) {
      if (isset($a->conditions['node']['values']) && $a->conditions['node']['options']['node_form'] == 0) {
        if (in_array($type, $a->conditions['node']['values'])) {
          $printed = TRUE;
          $context = $a->name;
          $module = $a->export_module;
        }
      }
    }
    if ($printed) {
      $links[$type] = array(
        'href' => 'node/add/' . str_replace('_', '-', $type),
        'title' => ucwords(str_replace('_', ' ', $type)),
      );
    }
  }

  $section_links = array(
    'header' => array(
      'title' => 'This Section',
    ),
    'settings' => array(
      'title' => t('Settings'),
      'href' => 'features/customize/' . $module,
    ),
    'layout' => array(
      'title' => t('Layout'),
      'href' => 'cp/build/layout/' . $context,
    ),
  );

  drupal_alter('os_add_new_links', $links);

  ksort($links);
  $variables['title_suffix']['controls'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'contextual-controls-wrapper',
      ),
    ),
  );
  $variables['title_suffix']['controls']['add_new'] = array(
    '#theme' => 'ctools_dropdown',
    '#links' => $links,
    '#title' => t('Add New'),
    '#class' => 'add_new',
    '#access' => spaces_access_admin(),
  );
  $variables['title_suffix']['controls']['section_links'] = array(
    '#theme' => 'ctools_dropdown',
    '#links' => $section_links,
    '#title' => 'Links',
    '#class' => 'section_links',
    '#access' => spaces_access_admin(),
  );

  // Append flavor css
  ctools_include('themes', 'os');
  if ($flavor = current(os_theme_get_flavor())) {

    if (isset($flavor['css'])) {
      foreach ( $flavor['css'] as $css ) {
        drupal_add_css($flavor['path'] . '/' . $css, array(
          'type' => 'file',
          'preprocess' => FALSE,
          'weight' => 100,
          'group' => CSS_THEME,
        ));
      }
    }

    // Conditional css provided by: conditional-stylesheets[if lte IE 7][all][]
    // = orange-ie.css
    if (isset($flavor['conditional-stylesheets'])) {
      foreach ( $flavor['conditional-stylesheets'] as $cond => $media ) {
        foreach ( $media as $type => $files ) {
          foreach ( $files as $file ) {
            $options = array(
              'type' => 'file',
              'preprocess' => FALSE,
              'media' => $type,
              'browsers' => _os_conditional_css_browsers($cond),
            );
            drupal_add_css($flavor['path'] . '/' . $file, $options);
          }
        }
        // will this be supported?
        // http://drupal.org/node/522006
      }
    }
  }
}

/**
 * Cleans up some advanced settings and places them in a fieldset.
 */
function os_form_node_form_alter(&$form, $form_state) {
  unset($form['options']['promote']);
  $form['path']['pathauto']['#description'] = t('Uncheck this to create a custom alias below.');
}

/**
 * Menu call back.
 */
function os_settings_form($form_state) {
  $form = array();

  $form['os_use_dropdowns'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Dropdowns'),
    '#default_value' => variable_get('os_use_dropdowns', 1),
    '#description' => t('Enable dropdowns globally across your site. Unchecking will disable all custom menus from having dropdowns at all.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Inform CTools that the flavor plugin can be loaded from themes and that
 * plugin implementors should use .flav files instead of .info files
 */
function os_ctools_plugin_type() {
  return array(
    'flavor' => array(
      'load themes' => TRUE,
      'info file' => TRUE,
      'extension' => 'flav',
    ),
  );
}

/**
 * Implemenets hook_init().
 */
function os_init() {
  // Execute the "In a OS Site" context condition
  if ($plugin = context_get_plugin('condition', 'os_site')) {
    $plugin->execute();
  }
}

/**
 * Implements hook os_layout_contexts().
 *
 * @return
 *  Avalible contexts with thier descriptions.
 */
function os_os_layout_contexts() {
  $provided_contexts = &drupal_static(__FUNCTION__);

  // Static cache of avalible contexts.
  if (count($provided_contexts)) {
    return $provided_contexts;
  }

  // Contexts provided by this module.
  $provided_contexts = array(
    'os_public' => 'All Sections',
    'os_front' => 'Front Page',
  );

  // Contexts provided by features.
  $features = spaces_features('og');
  foreach ( $features as $name => $feature ) {
    $info = $feature->info['features'];
    if (isset($info['context'])) {
      foreach ($info['context'] as $ctx) {
        $provided_contexts[$ctx] = $feature->info['name'];
      }
    }
  }

  return $provided_contexts;
}

/**
 * Returns HTML for the Powered by Openscholar text.
 *
 * @ingroup themeable
 */
function theme_openscholar_powered_by() {
  return '<span>' . t('<a href="@poweredby">OpenScholar</a>', array(
      '@poweredby' => 'http://openscholar.harvard.edu'
  )) . '</span>';
}

/**
 * Returns the HTML for the login link.
 *
 * Encode the destination path to return the the current page you are on,
 * accounting for aliases and groups.
 */
function theme_openscholar_login($variables) {
  global $user;

  // Do not print the login link if you are logged in.
  if ($user->uid) {
    return "";
  }

  return l($variables['link_text'], "user", array(
    'purl' => array('disabled' => TRUE,),
    'attributes' => $variables['attributes'],
    'alias' => TRUE,
  ));
}

/**
 * Returns HTML for the Get Started Block.
 *
 * @todo Add Slider
 * @todo Add 'hide forever' code
 *       @ingroup themeable
 */
function theme_openscholar_get_started() {
  if (module_exists('vsite') && $vsite = spaces_get_space()) {
    $create_time = $vsite->group->created;
  }

  $links = theme('item_list', array(
    'items' => array(
      l("Enable or disable features for your site", 'cp/build/features'),
      l("Add/manage content", 'cp/content'),
      l("Manage who may use your site", 'cp/users'),
      l("Change the look of your site", 'cp/appearance'),
      l("Move elements in your page layout", 'cp/build/layout'),
      l("View documentation", "help/vsitehelp/OpenScholar-Documentation"),
    ),
  ));

  // Created in the last 26 hours?
  $s_welcome_message = (isset($create_time) && (time() - $create_time < 93600)) ? "Welcome to your new website!" : "";
  $s_short_message = (isset($create_time) && (time() - $create_time < 93600)) ? "Need help <span>getting started?</span>" : "Need quick access to <span>common settings?</span>";
  // drupal_add_js(drupal_get_path('module',
  // 'vsite').'/theme/vsite.js','module');

  $result = <<<MESSAGE
      <div id="message_welcome_message">
        <div class="toggle">$s_short_message</div>
        <div id="welcome_wrapper" class="slider">
          <h3>{$s_welcome_message}</h3>
          <p>Below are a few additional resources to help you. You may access the control panel at any time by clicking the link in the top right corner of the screen.</p>
          {$links}
        </div> <!-- SLIDER -->
      </div>
MESSAGE;

  return $result;
}

/**
 * Implementation of hook_context_plugins().
 *
 * This is a ctools plugins hook.
 */
function os_context_plugins() {
  $plugins = array();

  $plugins['os_context_condition_os_site'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'os') . '/plugins',
      'file' => 'os_context_condition_os_site.inc',
      'class' => 'os_context_condition_os_site',
      'parent' => 'context_condition',
    ),
  );

  $plugins['os_context_reaction_block'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'os') . '/plugins',
      'file' => 'os_context_reaction_block.inc',
      'class' => 'os_context_reaction_block',
      'parent' => 'context_reaction_block',
    ),
  );

  return $plugins;
}

/**
 * Implementation of hook_context_registry().
 */
function os_context_registry() {
  $registry = array();

  $registry['conditions'] = array(
    'os_site' => array(
      'title' => t('OS Site context'),
      'description' => t('Should this context be set in a vsite? If <strong>false</strong>, this context will be active outside a "OS Site".'),
      'plugin' => 'os_context_condition_os_site',
    ),
  );

  return $registry;
}

/**
 * Implementation of hook_context_registry_alter().
 */
function os_context_registry_alter(&$registry) {
  // Alter the registry to use OpenScholar's block reaction plugin which extends
  // the standard
  if (isset($registry['reactions']['block'])) {
    $registry['reactions']['block']['plugin'] = 'os_context_reaction_block';
  }
}

/**
 * Helper function for adding conditional css. Takes a browser css condition,
 * returns array to pass to drupal_add_css's $options['browser']
 * http://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_pre_render_conditional_comments/7
 *
 * @param string $cond
 *          // if IE lt 6
 * @return array
 */
function _os_conditional_css_browsers($cond) {
  $IE = FALSE;
  $cond = str_replace('if ', '', $cond);
  if (strpos($cond, 'IE')) {
    $IE = $cond;
  }

  return array(
    'IE' => $cond,
    '!IE' => FALSE,
  );
}

/**
 * Adds all our regions to every subtheme of os_basetheme.
 */
function os_system_info_alter(&$info, $file, $type) {
  if ($type != 'theme') {
    return;
  }

  // If the base theme for this theme is 'os_basetheme' or if the is a 'vsite'
  // theme add the default regions.
  if ((isset($info['base theme']) && $info['base theme'] == 'os_basetheme') || (isset($info['os']['theme_type']) && $info['os']['theme_type'] == 'vsite')) {

    $info['regions'] += array(
      'header_top' => 'Header Top',
      'header_first' => 'Header Main',
      'header_second' => 'Header Left',
      'header_third' => 'Header Right',
      'header_bottom' => 'Header Bottom',
      'menu_bar' => 'Menu Bar',
      'content_top' => 'Content Top',
      'content_first' => 'Content Left',
      'content_second' => 'Content Right',
      'content_bottom' => 'Content Bottom',
      'sidebar_first' => 'SideBar Left',
      'sidebar_second' => 'SideBar Right',
    );
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Rewrites path to add a return destination wherever it is clicked from.
 */
function os_url_outbound_alter(&$path, &$options, $original) {
  global $user;

  // Pages to add a destination return to their links.
  $loop_back_pages = array(
    'user',
    'user/logout',
  );

  // Only altering the logout/login path and
  // only when there is not already a destination
  // only alter login path if the user is logged
  // out, otherwise it is a link to "My account"
  if (!in_array($path,$loop_back_pages) || !empty($options['query']['destination']) || ($path == 'user' && $user->uid)) {
    return;
  }

  // If we are in the CP then just go to the homepage of the site.
  if (!context_isset('context', 'os_cp') || !isset($_GET['q'])) {
    // Use $_GET here to retrieve the original path in source form.
    $dest_path = $_GET['q'];
  }
  else {
    $dest_path = '';
  }

  // Prevent possibility of infinate loops.
  if (in_array($dest_path,$loop_back_pages)) {
    return;
  }

  // Some defaults for altering the current path.
  $current_options = array(
    'fragment' => '',
    'query' => '',
    'absolute' => FALSE,
    'alias' => FALSE,
    'prefix' => '',
  );
  // Allow other modules to alter the outbound URL and options.
  drupal_alter('url_outbound', $dest_path, $current_options, $dest_path);

  if ($current_options['prefix']) {
    $dest_path = $current_options['prefix'] . $dest_path;
  }

  // Add the existing query string if it exists.
  $query = drupal_http_build_query(drupal_get_query_parameters($_GET, array('q')));
  if ($query != '') {
    $dest_path .= '?' . $query;
  }

  $options['query']['destination'] = drupal_encode_path($dest_path);
}

/**
 * Add defaults to blocks as required.
 *
 * Some of this was handled by the core block module which is no longer used.
 *
 * @param $blocks
 */
function os_context_block_info_alter(&$blocks) {

  foreach ($blocks as $key => $block) {
    // Make sure weight is set.
    if (!isset($block->weight)) {
      $blocks[$key]->weight = 0;
    }
  }
}

/**
 * Allow altering of views before build but after the filters are attached.
 *
 * @param view $view
 */
function os_views_pre_build(&$view) {
  // Is this the RSS Feed View.

  if ($view->name == 'os_feed') {
    // Alter the view to only display enabled content types.

    $bundles = array_keys(os_get_bundles());
    $view->filter['type']->value = $bundles;
  }
}

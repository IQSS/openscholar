<?php
// $Id$

include_once ('cp.features.inc');

/**
 * Control Panel
 */

define('CP_MENU_OFF', 'off');
define('CP_MENU_MINI', 'mini');
define('CP_MENU_FULL', 'full');
function cp_invoke($hook, $args = array()) {
  // we're not in a cp mode
  if (!isset($_GET['cp']) || is_null($_GET['cp'])) {
    return;
  }

  module_load_include('inc', 'cp', 'includes/cp.' . $module);
  $function = 'cp_' . $module . '_' . $hook;
  if (function_exists($function)) {
    $function($args);
  }
}

/**
 * Loads an include file based on a get
 */
function cp_init() {
  cp_invoke('init');
}

/**
 * Implements hook_menu
 */
function cp_menu() {
  $items = array();

  $spaces_path = drupal_get_path('module', 'spaces');
  $items["cp/build"] = array(
    'title' => 'Site building',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form',
    ),
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10,
  );

  $items["cp/build/features"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form',
    ),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10,
  );

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    //'page callback' => 'cp_taxonomy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_vocabularies'),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  $items["cp/build/taxonomy/add"] = array(
    'title' => 'Add vocabulary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_vocabulary'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  // feature customize forms
  $features = spaces_features('site');
  foreach ($features as $name => $feature) {
    $items['cp/build/features/%ctools_js/' . $name] = array(
      'title' => 'Features',
      'page callback' => 'cp_feature_customize',
      'page arguments' => array(3, 4),
      'access callback' => 'spaces_access_admin',
      'file' => 'cp.pages.inc',
    );
  }

  $items['cp/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_settings_form'),
    'file' => 'cp.form.inc',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'spaces_access_admin',
    'weight' => 30,
  );

  $items['cp/account'] = array(
    'title' => 'Account',
    'title callback' => 'cp_user_title',
    'page callback' => 'user_page',
    'access callback' => TRUE,
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
    'weight' => 100,
    'options' => array(
      'alter' => TRUE,
      'html' => TRUE,
    ),
  );

  $items['cp/account/logout'] = array(
    'title' => 'Log out',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'user_logout',
    'weight' => 10,
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
    'options' => array(
      'alter' => TRUE,
      'html' => TRUE,
    ),
  );

  return $items;
}

function cp_menu_alter(&$items) {
  // make them all part of 'cp' menu
  foreach ($items as $path => $item) {
    if (strpos($path, 'cp') === 0) {
      if (!array_key_exists('menu_name', $item)) {
        $items[$path]['menu_name'] = 'cp';
      }

      // @todo maybe provide our own permissoin instead ?
      if (!array_key_exists('access callback', $item)) $items[$path]['access arguments'] = array(
        'access control panel',
      );
    }
  }
}

/**
 * Change the title of the Account link to have the user's name in it
 */
function cp_user_title() {
  if (user_is_logged_in()) {
    return t('Hello <strong>@username</strong>', array('@username' => '' . format_username($GLOBALS['user']) . ''));
  }
  return t('Login');
}

/**
 * Alter CP user links to return to the current page when finished.
 */
function cp_translated_menu_link_alter(&$link) {
  if (strpos($link['link_path'], 'cp/account') !== FALSE) {
    $link['localized_options']['query'] = drupal_get_destination();
  }
}

function cp_theme() {
  $theme = array();
  $theme['cp-toolbar'] = array(
    'render element' => 'cp_toolbar',
    'template' => 'cp-toolbar',
    'path' => drupal_get_path('module', 'cp') . '/theme',
  );

  return $theme;
}

function cp_permission() {
  return array(
    'access control panel' => array(
      'title' => t('Access Control Panel'),
    ),
  );
}

/**
 * cp/build/taxonomy callback
 */
function cp_taxonomy() {
  if (module_exists('vsite')) {
    $vsite = spaces_get_space();
    return l("Edit/ADD this Groups Vocabularies", "group/{$vsite->group_type}/{$vsite->id}/admin/taxonomy") . t("(outside CP for now)");
  }

  return drupal_get_form('taxonomy_overview_vocabularies');
}

/**
 * Make a decision about the active theme
 */
function cp_custom_theme() {

  //Turn the CP theme on
  if (cp_use_cp_theme()) {
    return variable_get('os_cp_theme', 'cp');
  }
}

/**
 * @function cp_use_cp_theme
 *
 * @return Bool indicating whether or not to use cp theme.
 */
function cp_use_cp_theme() {
  if ((arg(0) == 'cp') ||
    (arg(0) == 'os') ||
    (arg(0) == 'media') ||
    (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit' || arg(2) == 'delete'))
  ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * Alter the features form in the cp to remove un-needed componentes
 *
 * @param
 *          $form
 * @param
 *          $form_state
 * @param
 *          $form_id
 */
function cp_form_spaces_features_form_alter(&$form, &$form_state, $form_id) {
  // Only make changes if we are in the Openscholar Admin section
  if (!context_isset('context', 'os_cp')) {
    return;
  }
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  $spaces_features = variable_get('spaces_features', array());

  foreach (array_keys($form['spaces_features']) as $f_name) {
    if ($f_name[0] == '#') {
      continue;
    }

    // is this feature customizable ?
    // by convention feature settings form is at features/feature_name
    $item = menu_get_item('features/' . $f_name);

    $class = (isset($_GET['open_feature_settings']) && $_GET['open_feature_settings'] == $f_name) ? "modal_click_onload" : "";

    //, 'ctools-modal-openscholar-style-default');
    $link = ctools_modal_text_button('customize', 'cp/build/features/nojs/' . $f_name, 'customize ' . $f_name, $class);
    $form['settings'][$f_name] = array(
      '#type' => 'markup',
      '#markup' => $link,
    );
  }

  if (isset($form['site_frontpage'])) {
    // Allows users with administer spaces permission to change the site path
    $form['site_frontpage']['#access'] = user_access('administer spaces');
    $form['site_frontpage_path']['#access'] = user_access('administer spaces');
  }

  if (!(module_exists('vsite') && ($vsite = spaces_get_space()))) {
    return;
  }

  $form['actions']['space_overrides'] = array(
    '#markup' => l('overrides', 'node/' . $vsite->id . '/features/overrides'),
    '#weight' => 100,
    '#access' => user_access('administer spaces'),
  );
}

/**
 * Gets all the settings a module could define for a site
 * but there aren't enough of to have its own page.
 */
function cp_get_setting_forms() {
  $settings = module_invoke_all('cp_settings');
  drupal_alter('cp_settings', $settings);

  return $settings;
}

/**
 * Implementation of hook_cp_settings.
 * Allows user to switch between full and mini cp menus on the front view
 */
function cp_cp_settings() {
  $setting = array();
  $setting['cp_admin_menu'] = array(
    'group' => array(
      '#title' => t('Admin Menu'),
      '#id' => 'admin-menu',
    ),
    'form' => array(
      '#type' => 'checkbox',
      '#default_value' => variable_get('cp_admin_menu', 0),
      '#title' => t('Display Admin Menu Bar'),
      '#description' => t('The admin menu bar displays at the top of the page when you are logged in as a side adminstrator. <br>
      Checking this will cause the admin menu at the top of the page now to be displayed at the top of the public view of your site as well. Only managers of your site will see this bar.'),
    ),
  );

  return $setting;
}


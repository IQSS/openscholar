<?php
include_once ('vsite.features.inc');
include_once ('includes/vsite.inc');

/**
 * Helper function to return the current vsite
 */
function vsite_get_vsite($sid = false){
  if ($sid && intval($sid)) {
    $vsite = spaces_load('og', $sid, false);
  }
  else {
    $vsite = spaces_get_space();
  }

  if ($vsite && $vsite->type == 'og') {
    return $vsite;
  }

  return false;
}

/**
 * Helper function to return the current purl prefix
 *
 * @param vsite $vsite
 */
function vsite_get_purl($vsite = false){
  if (! $vsite) {
    $vsite = spaces_get_space();
  }

  if (! $vsite || ! isset($vsite->group)) {
    return "";
  }

  return $vsite->group->purl;
}

/**
 * Hooks
 */

/**
 * Implements hook_BASE_ID_form_alter().
 *
 * Runs on every node form
 */
function vsite_form_node_form_alter(&$form, &$form_state, $form_id){
  if (og_is_group_type('node', $form['#bundle'])) {
    // Hide the comment settings form
    $form['comment_settings']['#access'] = false;
    $form['comment_settings']['comment']['#default_value'] = 1;
  }
}

/**
 * Return the default value for the homepage path
 */
function vsite_group_default_homepage_value($entity_type, $entity, $field, $instance, $langcode){
  global $base_url;

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  // Is this a group node
  if (og_is_group_type($entity_type, $bundle) && isset($entity->purl)) {
    // When a site is first created it does not have a domain provider, use the
    // path provider that is attached to the entity, we can't use the standard
    // purl modifier here because the entry has not been made in the table yet
    return array(
      0 => array(
        'title' => '',
        'url' => url($entity->purl['value'], array(
          'base_url' => variable_get('purl_base_domain', $base_url),
          'absolute' => true
        ))
      )
    );
  }
}

/**
 * Make a decision about the active theme
 */
function vsite_custom_theme(){

  // See function description for why this is called here
  _vsite_purl_init();

  if ($space = spaces_get_space() && (! module_exists('cp') || ! cp_use_cp_theme())) {
    ctools_include('themes', 'os');
    $theme = os_theme_get();
    return $theme;
  }
}

/**
 * Alter the space presets to add vsite specific information
 *
 * @param (array) $presets
 */
function vsite_spaces_presets_alter(&$presets){
  ctools_include('path', 'vsite');

  // Alter the preset to include the pathauto settings for nodes prefixed with
  // the purl path
  $pathauto_settings = _vsite_get_pathauto_settings();
  foreach ( $presets as $name => &$preset ) {
    if (substr($name, 0, 3) == "os_") {
      $preset->value['variable'] = array_merge($pathauto_settings, $preset->value['variable']);
    }
  }
}

/**
 * Alter export to not include fields added through code
 */
function vsite_features_export_alter(&$export, $module_name){
  if ($module_name == 'vsite') {
    // I don't know why this is being add as a dependency
    unset($export['dependencies']['os_publications']);
  }
}

/**
 * Implementation of hook spaces_plugins
 */
function vsite_spaces_plugins(){
  $plugins = array();
  $plugins['vsite'] = array(
    'handler' => array(
      'class' => 'vsite',
      'parent' => 'space_og'
    )
  );
  return $plugins;
}

/**
 * Implementation of hook registry_alter
 * Alter the registry to tell spaces_og groups to use the vsite plugin by
 * default
 */
function vsite_spaces_registry_alter(&$registry){

  // use the vsite plugin by default
  if (isset($registry['types']['og'])) {
    $registry['types']['og']['plugin'] = 'vsite';
  }
}

/**
 * Handles access rules for when site owner is attempting to create a another
 * site
 *
 * @return boolean
 */
function vsite_vsite_exists_access($vsites = array()) {
  global $user;

  // load user's vsites. anon (uid 0) has no vsites
  if (! $vsites && $user->uid) {
    ctools_include('vsite', 'vsite');
    $vsites = vsite_get_vsite_by_owner($user->uid);
  }

  // Does user have permission to create vsites?
  if (! user_access('create vsite content on behalf') && ! user_access('create vsite content')) {
    if(current_path() == 'site/register') {
      // Set error message when appropriate.
      global $base_url;
      drupal_get_messages();  // Clear message queue.
      drupal_set_message(t('You do not have permission to create new OpenScholar sites. !link',
        array('!link' => l(t('Return home.'), $base_url))
      ), 'error');
    }

    return FALSE;
  }

  // Can user create more vsites?
  if (! (count($vsites) < variable_get('os_vsites_per_user') || user_access('create vsite on behalf'))) {
    if(current_path() == 'site/register') {
      // Set error message when appropriate.
      drupal_get_messages();  // Clear message queue.
      drupal_set_message(t('You have already created the maximum of %num OpenScholar !sites. !link',
        array('%num' => count($vsites),
              '!sites' => count($vsites) > 1 ? 'sites' : 'site',
              '!link' => l(t('Go to your site' . (count($vsites) > 1 ? 's.' : '.')), count($vsites) > 1 ? 'user' : $vsites[0]->get_absolute_url()),
        )
      ), 'error');
    }

    return FALSE;
  }

  return TRUE;
}

function vsite_permission(){
  return array(
    'create vsite content on behalf' => array(
      'title' => t('Create vsite content on behalf of other users')
    )
  );
}

/**
 * Any path in spaces is immediately disqualified from being in an overlay
 * because none
 * of them start with a wildcard.
 * They expect something like node/5/edit, when they get
 * site01/node/5/edit and fail.
 * This is rectified by putting a wildcard at the beginning to catch the space
 * modifier.
 */
function vsite_admin_paths_alter(&$paths){
  $new_paths = array();
  foreach ( $paths as $p => $b ) {
    if (strpos($p, '*/') !== 0) {
      $new_paths['*/' . $p] = TRUE;
    }
  }
  $paths = array_merge($paths, $new_paths);
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function vsite_vsite_og_node_type_info(){
  return array(
    'vsite' => 'group'
  );
}

/**
 * Return if the bundle is a group or a group content.
 *
 *  @param $bundle
 *    The node type bundle.
 *
 *  @return
 *    group/group content. If $bundle is empty, all the node types info will be
 *    returned.
 */
function vsite_get_type_from_bundle($bundle = NULL){
  $info = module_invoke_all('vsite_og_node_type_info');

  if (empty($bundle)) {
    return $info;
  }

  return isset($info[$bundle]) ? $info[$bundle] : FALSE;
}

/**
 * Implements hook_field_attach_create_bundle().
 *
 * When creating a new node bundle check if the bundle is defined as a group or
 * group content and attach the right fields.
 *
 * @see hook_vsite_og_node_type_info().
 */
function vsite_field_attach_create_bundle($entity_type, $bundle){
  switch ($entity_type) {
    case 'file' :
      // every file is group content
      drupal_set_message('Adding og_group_ref field to file type ' . $bundle . ' in create_bundle');
      vsite_attach_fields_to_group_content('file', $bundle);
      break;
    case 'node' :
      if (! $type = vsite_get_type_from_bundle($bundle)) {
        return;
      }

      if ($type == 'group') {
        vsite_attach_fields_to_group($bundle);
      }
      else {
        // Group content.
        vsite_attach_fields_to_group_content('node', $bundle);
      }
      break;
  }
}

/**
 * Add group content fields to bundle.
 *
 * @param $entity_type
 *   The entity type of the bundle we want to attach the field to
 *
 * @param $bundle
 *   The bundle to attach the fields to.
 */
function vsite_attach_fields_to_group_content($entity_type, $bundle){
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  $og_field['instance']['display'] = array(
    'default' => array(
      'type' => 'hidden'
    ),
    'teaser' => array(
      'type' => 'hidden'
    )
  );
  // Enable Entity reference prepopulate.
  $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
    'status' => TRUE,
    'action' => 'hide',
    'fallback' => 'none',
    'skip_perm' => 'administer group',
    'og_context' => TRUE,
  );
  og_create_field(OG_AUDIENCE_FIELD, $entity_type, $bundle, $og_field);
}

/**
 * Add group fields to bundle
 *
 * @param $bundle
 *   The node-type to attach the fields to.
 */
function vsite_attach_fields_to_group($bundle){
  og_create_field(OG_GROUP_FIELD, 'node', $bundle);
  og_create_field(OG_ACCESS_FIELD, 'node', $bundle);

  if (! field_info_field('field_site_address')) {
    // field_site_address.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_address',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format'
          ),
          'table' => 'filter_format'
        )
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format'
        )
      ),
      'module' => 'text',
      'settings' => array(
        'max_length' => '255'
      ),
      'translatable' => '0',
      'type' => 'text'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_site_address', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 3
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_address',
      'label' => 'Site Address',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '30'
        ),
        'type' => 'text_textfield',
        'weight' => '32'
      )
    );
    field_create_instance($instance);
  }

  if (! field_info_field('field_site_description')) {
    // field_site_description.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_description',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format'
          ),
          'table' => 'filter_format'
        )
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format'
        )
      ),
      'module' => 'text',
      'settings' => array(
        'max_length' => '255'
      ),
      'translatable' => '0',
      'type' => 'text'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_site_description', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 2
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_description',
      'label' => 'Site Description',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE
      ),
      'widget' => array(
        'module' => 'text',
        'settings' => array(
          'size' => 60
        ),
        'type' => 'text_textfield',
        'weight' => '31'
      )
    );
    field_create_instance($instance);
  }

  if (! field_info_field('field_site_logo')) {
    // field_site_logo.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_logo',
      'foreign keys' => array(
        'fid' => array(
          'columns' => array(
            'fid' => 'fid'
          ),
          'table' => 'file_managed'
        )
      ),
      'indexes' => array(
        'fid' => array(
          0 => 'fid'
        )
      ),
      'module' => 'imagefield_crop',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public'
      ),
      'translatable' => '0',
      'type' => 'imagefield_crop'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_site_logo', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'image',
          'settings' => array(
            'image_link' => '',
            'image_style' => ''
          ),
          'type' => 'image',
          'weight' => 4
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_logo',
      'label' => 'Site Logo',
      'required' => FALSE,
      'settings' => array(
        'alt_field' => 0,
        'file_directory' => '',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 0,
        'user_register_form' => FALSE
      ),
      'widget' => array(
        'module' => 'imagefield_crop',
        'settings' => array(
          'collapsible' => 2,
          'croparea' => '500x500',
          'custom_ratio' => '',
          'enforce_minimum' => TRUE,
          'enforce_ratio' => TRUE,
          'gif_processing' => 'convert',
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
          'resolution' => '200x150',
          'select_maximum_area' => TRUE,
          'validate_resolution' => 0
        ),
        'type' => 'imagefield_crop_widget',
        'weight' => '33'
      )
    );
    field_create_instance($instance);
  }

  if (! field_info_field('field_group_path')) {
    // field_group_path.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_group_path',
      'foreign keys' => array(),
      'indexes' => array(),
      'module' => 'link',
      'settings' => array(
        'attributes' => array(
          'class' => '',
          'rel' => '',
          'target' => 'default'
        ),
        'display' => array(
          'url_cutoff' => 80
        ),
        'enable_tokens' => 1,
        'title' => 'optional',
        'title_maxlength' => 128,
        'title_value' => '',
        'url' => 0
      ),
      'translatable' => '0',
      'type' => 'link_field'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_group_path', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'default_value_function' => 'vsite_group_default_homepage_value',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => '5'
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_group_path',
      'label' => 'Group Homepage Path',
      'required' => 0,
      'settings' => array(
        'attributes' => array(
          'class' => '',
          'configurable_title' => 0,
          'rel' => '',
          'target' => 'default',
          'title' => ''
        ),
        'display' => array(
          'url_cutoff' => '80'
        ),
        'enable_tokens' => 0,
        'rel_remove' => 'default',
        'title' => 'none',
        'title_maxlength' => '128',
        'title_value' => '',
        'url' => 0,
        'user_register_form' => FALSE,
        'validate_url' => 0
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'link',
        'settings' => array(),
        'type' => 'link_field',
        'weight' => '2'
      )
    );
    field_create_instance($instance);
  }
}

/**
 * @function _vsite_purl_init()
 *
 * Calls purl_init. This is used during hook_custom_theme, so that we can
 * get the space earlier.
 *
 * Following a cache clear, the spaces presets need rebuilding. At some
 * point in this process, l() is called to put a link in the description
 * of a field in image. If l() tries to theme the link it creates,
 * drupal_initialize_theme is run, defeating the purpose of hook_custom_theme.
 *
 * This function prevents l() from initalizing the theme by setting theme_link
 * to false, running purl_init, and then restoring theme_link to its original
 * value.
 *
 * This fixes the theme problem after a cache clear. May have other unforseen
 * consequences.
 */
function _vsite_purl_init(){
  // hack alert!
  global $conf;
  $theme_link = isset($conf['theme_link']) ? $conf['theme_link'] : NULL;
  $conf['theme_link'] = FALSE;

  purl_init();

  if (isset($theme_link)) {
    $conf['theme_link'] = $theme_link;
  }
  else {
    unset($conf['theme_link']);
  }
}

/**
 * Implements hook_field_attach_form().
 */
function vsite_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode){
  list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
  $vsite = vsite_get_vsite();

  if (!$vsite || ! og_is_group_content_type($entity_type, $bundle)) {
    //We can't determine the site, or this isn't group content.
    return;
  }

  $field_names = og_get_group_audience_fields($entity_type, $bundle);
  foreach ( $field_names as $field_name => $label ) {
    // We don't hide the field via hook_field_access(), as the
    // default value won't be set.
    $form[$field_name]['#access'] = FALSE;
  }
}

/**
 * Implements hook_menu_alter().
 * Using this function to remove the "Groups" link
 * from the users 'edit' form.
 */
function vsite_menu_alter(&$items){
  $items['user/%user/edit/groups']['access callback'] = false;
}

/**
 * Function to return all sites a user owns.
 */
function vsite_load_user_sites($user_id){
  $sites = array();
  $sites_array = array();
  // Grab their sites.


  $vsites_owner = vsite_get_vsite_by_owner($user_id);
  // Create each site as a link.
  foreach ( $vsites_owner as $site ) {
    $sites = array(
      '#title' => $site->group->title,
      '#type' => 'link',
      '#href' => $site->get_absolute_url()
    );
    // Prepare them for theme_list_item.
    $sites_array[] = array(
      'data' => drupal_render($sites)
    );
  }

  return $sites_array;
}

/**
 * Function to return all sites the user is a member of of.
 */
function vsite_load_user_membership($user_id){
  $member_sites = array();
  $member_array = array();

  $vsites_member = vsite_get_user_vsites($user_id);
  // This function is returning 'all' sites, both member and admin sites.
  // Loop through and create links for the sites, but also check if they're the owner
  // or not, ignore them if they are.
  foreach ( $vsites_member as $m_site ) {
    // Check against the uid of the site
    if ($user_id != $m_site->group->uid) {
      $member_sites = array(
        '#title' => $m_site->group->title,
        '#type' => 'link',
        '#href' => $m_site->get_absolute_url()
      );
      // Prepare them for theme_list_item.
      $member_array[] = array(
        'data' => drupal_render($member_sites)
      );
    }
  }

  return $member_array;
}

/**
 * Implements hook_user_view_alter().
 * Altering the user view to remove history, groups and other groups
 * also altering to add in "My Websites" for all sites the user belongs to.
 */
function vsite_user_view_alter(&$build){
  global $user;
  // Removal section.
  // Remove the "history" and "member for" info if it's there.
  if (isset($build['summary'])) {
    unset($build['summary']);
  }
  // Remove the og_user_group_ref.
  if (isset($build['og_user_group_ref'])) {
    $build['og_user_group_ref']['#access'] = FALSE;
  }
  // Remove the og_other_user_group_ref.
  if (isset($build['og_other_user_group_ref'])) {
    $build['og_other_user_group_ref']['#access'] = FALSE;
  }
  // Remove the og_user_node.
  if (isset($build['og_user_node'])) {
    $build['og_user_node']['#access'] = FALSE;
  }

  // Additions section.
  // Load data of their sites.
  $owner_sites = vsite_load_user_sites($build['#account']->uid);
  $member_sites = vsite_load_user_membership($build['#account']->uid);

  $vsites_list = '';
  // Websites item build.
  if (! empty($owner_sites) || ! empty($member_sites)) {
    // Pass the items to theme_item_list.
    if (! empty($owner_sites)) {
      // In d6 a plural or singular was used in order to apply the correct CSS selector to the list
      // retain that functionality.
      if (count($owner_sites) > 1) {
        $css_selector = array(
          'class' => 'plural'
        );
        $website_title = t('My Websites:');
      }
      else {
        $css_selector = array(
          'class' => 'single'
        );
        $website_title = t('My Website:');
      }
      $vsites_list .= theme_item_list(array(
        'items' => $owner_sites,
        'title' => $website_title,
        'type' => 'ul',
        'attributes' => $css_selector
      ));
    }
    if (! empty($member_sites)) {
      if (count($member_sites) > 1) {
        $css_selector = array(
          'class' => 'plural'
        );
        $membership_title = t('Websites I am a member of:');
      }
      else {
        $css_selector = array(
          'class' => 'single'
        );
        $membership_title = t('Website I am a member of:');
      } // end if
      $vsites_list .= theme_item_list(array(
        'items' => $member_sites,
        'title' => $membership_title,
        'type' => 'ul',
        'attributes' => $css_selector
      ));
    }
    // Set a new field.
    $build['web_sites'] = array(
      '#title' => t('Website Membership Summary:'),
      '#type' => 'user_profile_item',
      '#markup' => $vsites_list,
      '#weight' => '10'
    );
  }
}

/**
 * Implement hook_mail_alter().
 * Function to alter some of the emails that are sent out
 * to users based on certain actions.
 */
function vsite_mail_alter(&$message){
  global $base_url;

  switch ($message['id']) {
    // Account created during "Create this OS Site on behalf of another user".
    case 'user_register_no_approval_required' :
      // Get the user id we just created.
      $n_new_user = $message['params']['account']->uid;
      // Load the user.
      $o_user = user_load($n_new_user);
      // Grab their first name, if it doesnt exist, use their user name.
      if (! empty($o_user->field_first_name['und'][0]['value'])) {
        $first_name = $o_user->field_first_name['und'][0]['value'];
      }
      else {
        $first_name = $o_user->name;
      }
      // Alter the subject.
      $message['subject'] = t('An OpenScholar account has been created for you at !site_name', array(
        '!site_name' => variable_get('site_name', 'OpenScholar')
      ));
      $a_msg_variables = array(
        '!site' => variable_get('site_name', 'OpenScholar'),
        '!login_url' => user_pass_reset_url($o_user),
        '!mailto' => $o_user->mail,
        '!firstname' => $first_name,
        '!username' => $o_user->name,
        '!futurelogin' => $base_url . '/user/'
      );

      // Alter the body message.
      $message['body'][0] = t("Dear !firstname,\n\nYour account at the !site website has been created for you. You may now log in by either clicking through on the following link or pasting it into your browser:\n\n !login_url\n\n(Note: This login can be used only once.)\n\nYour username is: !username \n\nAfter setting your password with the included link, you will be able to log in at !futurelogin in the future.\n\nSincerely,\nThe !site Team", $a_msg_variables);
      break;
    // Account created by admin in the admin/people panel.
    case 'user_register_admin_created' :
      // Get the user id we just created.
      $n_new_user = $message['params']['account']->uid;
      // Load the user data.
      $o_user = user_load($n_new_user);
      // Grab their first name, if it doesnt exist, use their user name.
      if (! empty($o_user->field_first_name['und'][0]['value'])) {
        $first_name = $o_user->field_first_name['und'][0]['value'];
      }
      else {
        $first_name = $o_user->name;
      }
      // Alter the email subject.
      $message['subject'] = t('An OpenScholar account has been created for you at !site_name', array(
        '!site_name' => variable_get('site_name', 'OpenScholar')
      ));
      $a_msg_variables = array(
        '!site' => variable_get('site_name', 'OpenScholar'),
        '!login_url' => user_pass_reset_url($o_user),
        '!mailto' => $o_user->mail,
        '!firstname' => $first_name,
        '!username' => $o_user->name,
        '!futurelogin' => $base_url . '/user/'
      );
      // Alter the message body.
      $message['body'][0] = t("Dear !firstname,\n\nA site owner at the !site website has created an account for you. You may now log in by either clicking through on the following link or pasting it into your browser:\n\n !login_url\n\n(Note: This login can be used only once.)\n\nYour username is: !username \n\nAfter setting your password with the included link, you will be able to log in at !futurelogin in the future.\n\nSincerely,\nThe !site Team", $a_msg_variables);
      break;
  }
}

/**
 * Implements hook_node_presave().
 */
function vsite_node_presave($node){
  include_once (drupal_get_path('module', 'vsite') . '/includes/path.inc');
  _vsite_alter_node_path_settings($node);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function vsite_form_user_profile_form_alter(&$form,&$form_state,&$form_id) {
  if (!array_key_exists('redirect_from_reset', $form)) $form['redirect_from_reset'] = array('#type' => 'hidden', '#default_value' => FALSE);

  if ($_SERVER['REDIRECT_STATUS'] == '200' && strstr($_SERVER['HTTP_REFERER'], 'user/reset') !== FALSE) {
    $form['redirect_from_reset']['#value'] = TRUE;
  }// Are we coming from the special login link?

  $form['#submit'][] = 'vsite_redirect_reset_submit';
}

/**
 * Submit handler used to check the passed reset value, if it is present we will redirect.
 */
function vsite_redirect_reset_submit($form, &$form_state) {
  if (is_array($form_state['values'])
  && array_key_exists('redirect_from_reset', $form_state['values'])
  && $form_state['values']['redirect_from_reset']) {
  	$vsites = vsite_get_vsite_by_owner($form['#user']->uid);
  	if(count($vsites) == 1 && is_object($vsites[0])){
  	  drupal_goto( $vsites[0]->get_absolute_url() );
  	}else{
  	  drupal_goto('user/'.$form['#user']->uid);
  	}
  }
}

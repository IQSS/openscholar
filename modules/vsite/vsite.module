<?php
include_once ('vsite.features.inc');
include_once ('includes/vsite.inc');

/**
 * Public Functions
 */

/**
 * Helper function to return the current vsite
 */
function vsite_get_vsite($sid = false){

  if($sid && intval($sid)){
    $vsite = spaces_load('og', $sid, false);
  }else{
    $vsite = spaces_get_space();
  }

  if($vsite && $vsite->type == 'og'){
    return $vsite;
  }

  return false;
}

/**
 * Helper function to return the current purl prefix
 *
 * @param vsite $vsite
 */
function vsite_get_purl($vsite = false){
  if (! $vsite) {
    $vsite = spaces_get_space();
  }

  if (! $vsite || ! isset($vsite->group)) {
    return "";
  }

  return $vsite->group->purl;
}

/**
 * Hooks
 */

/**
 * Implements hook_BASE_ID_form_alter().
 *
 * Runs on every node form
 */
function vsite_form_node_form_alter(&$form, &$form_state, $form_id){
  if (og_is_group_type('node', $form['#bundle'])) {
    // Hide the comment settings form
    $form['comment_settings']['#access'] = false;
    $form['comment_settings']['comment']['#default_value'] = 1;
  }
}

/**
 * Return the default value for the homepage path
 */
function vsite_group_default_homepage_value($entity_type, $entity, $field, $instance, $langcode){
  global $base_url;

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  // Is this a group node
  if (og_is_group_type($entity_type, $bundle)) {
    // When a site is first created it does not have a domain provider, use the
    // path provider that is attached to the entity, we can't use the standard
    // purl modifier here because the entry has not been made in the table yet
    return array(
        0 => array(
            'title' => '',
            'url' => url($entity->purl['value'], array(
                'base_url' => variable_get('purl_base_domain', $base_url),
                'absolute' => true
            ))
        )
    );
  }
}

/**
 * Make a decision about the active theme
 */
function vsite_custom_theme(){

  // See function description for why this is called here
  _vsite_purl_init();

  if ($space = spaces_get_space() && (! module_exists('cp') || ! cp_use_cp_theme())) {
    ctools_include('themes', 'os');
    $theme = os_theme_get();
    return $theme;
  }
}

/**
 * Alter the space presets to add vsite specific information
 *
 * @param
 *          $presets
 */
function vsite_spaces_presets_alter(&$presets){
  ctools_include('path', 'vsite');

  // Alter the preset to include the pathauto settings for nodes prefixed with
  // the purl path
  $pathauto_settings = _vsite_get_pathauto_settings();
  foreach ( $presets as $name => &$preset ) {
    if (substr($name, 0, 3) == "os_") {
      $preset->value['variable'] = array_merge($pathauto_settings, $preset->value['variable']);
    }
  }
}

/**
 * Alter export to not include fields added through code
 */
function vsite_features_export_alter(&$export, $module_name) {
  if ($module_name == 'vsite') {
    // I don't know why this is being add as a dependency
    unset($export['dependencies']['os_publications']);
  }
}

/**
 * Implementation of hook spaces_plugins
 */
function vsite_spaces_plugins(){
  $plugins = array();
  $plugins['vsite'] = array(
    'handler' => array(
      'class' => 'vsite',
      'parent' => 'space_og'
    )
  );
  return $plugins;
}

/**
 * Implementation of hook registry_alter
 * Alter the registry to tell spaces_og groups to use the vsite plugin by
 * default
 */
function vsite_spaces_registry_alter(&$registry){

  // use the vsite plugin by default
  if (isset($registry['types']['og'])) {
    $registry['types']['og']['plugin'] = 'vsite';
  }
}

/**
 * Handles access rules for when site owner is attempting to create a another
 * site
 *
 * @return boolean
 */
function vsite_vsite_exists_access($vsites = array()){
  global $user;

  // load user's vsites. anon (uid 0) has no vsites
  if (! $vsites && $user->uid) {
    ctools_include('vsite', 'vsite');
    $vsites = vsite_get_vsite_by_owner($user->uid);
  }

  // if user has permissions to create sites, return true
  if (! user_access('create vsite content on behalf') && ! user_access('create vsite content')) {
    // drupal_set_message(t('You do not have permission to create new sites.'),
    // 'error', FALSE);
    return FALSE;
  }

  // user owns one or more sites
  if (! (count($vsites) < variable_get('os_vsites_per_user', 1) || user_access('create openscholar site on behalf of others'))) {
    // drupal_set_message(t('You have already created the maximum of %num OS
    // sites.', array('%num' => count($vsites))), 'error', FALSE);
    return FALSE;
  }

  return TRUE;
}

function vsite_permission(){
  return array(
      'create vsite content on behalf' => array(
          'title' => t('Create vsite content on behalf of other users')
      )
  );
}

/**
 * Any path in spaces is immediately disqualified from being in an overlay
 * because none
 * of them start with a wildcard.
 * They expect something like node/5/edit, when they get
 * site01/node/5/edit and fail.
 * This is rectified by putting a wildcard at the beginning to catch the space
 * modifier.
 */
function vsite_admin_paths_alter(&$paths){
  $new_paths = array();
  foreach ( $paths as $p => $b ) {
    if (strpos($p, '*/') !== 0) {
      $new_paths['*/' . $p] = TRUE;
    }
  }
  $paths = array_merge($paths, $new_paths);
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function vsite_vsite_og_node_type_info() {
  return array(
    'vsite' => 'group',
  );
}

/**
 * Return if the bundle is a group or a group content.
 *
 *  @param $bundle
 *    The node type bundle.
 *
 *  @return
 *    group/group content. If $bundle is empty, all the node types info will be
 *    returned.
 */
function vsite_get_type_from_bundle($bundle = NULL) {
  $info = module_invoke_all('vsite_og_node_type_info');

  if (empty($bundle)) {
    return $info;
  }

  return isset($info[$bundle]) ? $info[$bundle] : FALSE;
}

/**
 * Implements hook_field_attach_create_bundle().
 *
 * When creating a new node bundle check if the bundle is defined as a group or
 * group content and attach the right fields.
 *
 * @see hook_vsite_og_node_type_info().
 */
function vsite_field_attach_create_bundle($entity_type, $bundle) {
  if ($entity_type != 'node') {
    return;
  }

  if (!$type = vsite_get_type_from_bundle($bundle)) {
    return;
  }

  if ($type == 'group') {
    vsite_attach_fields_to_group($bundle);
  }
  else {
    // Group content.
    vsite_attach_fields_to_group_content($bundle);
  }
}

/**
 * Add group content fields to bundle.
 *
 * @param $bundle
 *   The node-type to attach the fields to.
 */
function vsite_attach_fields_to_group_content($bundle) {
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  $og_field['instance']['default_value_function'] = 'vsite_group_audience_field_default_value';
  og_create_field(OG_AUDIENCE_FIELD, 'node', $bundle, $og_field);
}

/**
 * Add group fields to bundle
 *
 * @param $bundle
 *   The node-type to attach the fields to.
 */
function vsite_attach_fields_to_group($bundle) {
  og_create_field(OG_GROUP_FIELD, 'node', $bundle);
  og_create_field(OG_ACCESS_FIELD, 'node', $bundle);

  if (!field_info_field('field_site_address')) {
    // field_site_address.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_address',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'translatable' => '0',
      'type' => 'text',
    );
    $field = field_create_field($field);
  }

  if (!field_info_instance('node', 'field_site_address', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => 'Your Town<br>Your City, State, ZIP',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 3,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_address',
      'label' => 'Site Address',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '30',
        ),
        'type' => 'text_textfield',
        'weight' => '32',
      ),
    );
    field_create_instance($instance);
  }

  if (!field_info_field('field_site_description')) {
    // field_site_description.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_description',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'module' => 'text',
      'settings' => array(
        'max_length' => '255',
      ),
      'translatable' => '0',
      'type' => 'text',
    );
    $field = field_create_field($field);
  }

  if (!field_info_instance('node', 'field_site_description', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => 'Your website',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 2,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_description',
      'label' => 'Site Description',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
        'weight' => '31',
      ),
    );
    field_create_instance($instance);
  }

  if (!field_info_field('field_site_logo')) {
    // field_site_logo.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_logo',
      'foreign keys' => array(
        'fid' => array(
          'columns' => array(
            'fid' => 'fid',
          ),
          'table' => 'file_managed',
        ),
      ),
      'indexes' => array(
        'fid' => array(
          0 => 'fid',
        ),
      ),
      'module' => 'imagefield_crop',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
      'translatable' => '0',
      'type' => 'imagefield_crop',
    );
    $field = field_create_field($field);
  }

  if (!field_info_instance('node', 'field_site_logo', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'image',
          'settings' => array(
            'image_link' => '',
            'image_style' => '',
          ),
          'type' => 'image',
          'weight' => 4,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_logo',
      'label' => 'Site Logo',
      'required' => FALSE,
      'settings' => array(
        'alt_field' => 0,
        'file_directory' => '',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'module' => 'imagefield_crop',
        'settings' => array(
          'collapsible' => 2,
          'croparea' => '500x500',
          'custom_ratio' => '',
          'enforce_minimum' => TRUE,
          'enforce_ratio' => TRUE,
          'gif_processing' => 'convert',
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
          'resolution' => '200x150',
          'select_maximum_area' => TRUE,
          'validate_resolution' => 0,
        ),
        'type' => 'imagefield_crop_widget',
        'weight' => '33',
      ),
    );
    field_create_instance($instance);
  }

  if (!field_info_field('field_group_path')) {
    // field_group_path.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_group_path',
      'foreign keys' => array(),
      'indexes' => array(),
      'module' => 'link',
      'settings' => array(
        'attributes' => array(
          'class' => '',
          'rel' => '',
          'target' => 'default',
        ),
        'display' => array(
          'url_cutoff' => 80,
        ),
        'enable_tokens' => 1,
        'title' => 'optional',
        'title_maxlength' => 128,
        'title_value' => '',
        'url' => 0,
      ),
      'translatable' => '0',
      'type' => 'link_field',
    );
    $field = field_create_field($field);
  }

  if (!field_info_instance('node', 'field_group_path', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'default_value_function' => 'vsite_group_default_homepage_value',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => '5',
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_group_path',
      'label' => 'Group Homepage Path',
      'required' => 0,
      'settings' => array(
        'attributes' => array(
          'class' => '',
          'configurable_title' => 0,
          'rel' => '',
          'target' => 'default',
          'title' => '',
        ),
        'display' => array(
          'url_cutoff' => '80',
        ),
        'enable_tokens' => 0,
        'rel_remove' => 'default',
        'title' => 'none',
        'title_maxlength' => '128',
        'title_value' => '',
        'url' => 0,
        'user_register_form' => FALSE,
        'validate_url' => 0,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'link',
        'settings' => array(),
        'type' => 'link_field',
        'weight' => '2',
      ),
    );
    field_create_instance($instance);
  }

}

/**
 * @function _vsite_purl_init()
 *
 * Calls purl_init. This is used during hook_custom_theme, so that we can
 * get the space earlier.
 *
 * Following a cache clear, the spaces presets need rebuilding. At some
 * point in this process, l() is called to put a link in the description
 * of a field in image. If l() tries to theme the link it creates,
 * drupal_initialize_theme is run, defeating the purpose of hook_custom_theme.
 *
 * This function prevents l() from initalizing the theme by setting theme_link
 * to false, running purl_init, and then restoring theme_link to its original
 * value.
 *
 * This fixes the theme problem after a cache clear. May have other unforseen
 * consequences.
 */
function _vsite_purl_init(){
  // hack alert!
  global $conf;
  $theme_link = isset($conf['theme_link']) ? $conf['theme_link'] : NULL;
  $conf['theme_link'] = FALSE;

  purl_init();

  if (isset($theme_link)) {
    $conf['theme_link'] = $theme_link;
  }
  else {
    unset($conf['theme_link']);
  }
}

/**
 * Sets the default value for the group audience fields.
 * This works even if the widget is not shown, e.g. due to restricted field access.
 */
function vsite_group_audience_field_default_value(){

  $vsite = spaces_get_space();

  if ($vsite) {
    // Set the group audience value to automatically be the current active site
    $default[] = array('target_id' => $vsite->group->nid);

    return $default;
  }
}

/**
 * Implements hook_field_access().
 */
function vsite_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op != 'edit' || $field['type'] != 'entityreference' || !og_is_group_audience_field($field['field_name'])) {
    return;
  }

  //If we are not on the field settings form, then deny access
  if (!empty($entity)) {
    return false;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Using this function to remove the "Groups" link
 * from the users 'edit' form.
 */
function vsite_menu_alter(&$items) {
  $items['user/%user/edit/groups']['access callback'] = false;
}

/**
 * Function to return all sites a user belongs to.
 */
function vsite_load_user_sites($user_id) {
  $sites = array();
  $sites_array = array();
  // Grab their sites.
  $vsites = vsite_get_vsite_by_owner($user_id);
  // Create each site as a link.
  foreach($vsites as $site) {
    $sites = array('#title'=>$site->group->title, '#type'=>'link','#href'=>$site->get_absolute_url());
    // Prepare them for theme_list_item.
    $sites_array[] = array('data'=>drupal_render($sites));
  }

  return $sites_array;
}

/**
 * Implementation of hook_user_view_alter().
 * Altering the user view to remove history, groups and other groups
 * also altering to add in "My Websites" for all sites the user belongs to.
 */
function vsite_user_view_alter(&$build) {
  global $user;

  // Removal section.
    // Remove the "history" and "member for" info if it's there.
    if(isset($build['summary'])) {
      unset($build['summary']);
    }
    // Remove the og_user_group_ref.
    if(isset($build['og_user_group_ref'])) {
      $build['og_user_group_ref']['#access'] = FALSE;
    }
    // Remove the og_other_user_group_ref.
    if(isset($build['og_other_user_group_ref'])) {
      $build['og_other_user_group_ref']['#access'] = FALSE;
    }

    // Make sure they're logged in.
    if($user->uid) {
    // Additions section.
      // Load their link created vsites.
      $vsites = vsite_load_user_sites($build['#account']->uid);

      // In d6 a plural or singular was used in order to apply the correct CSS selector to the list
      // retain that functionality.
      if(count($vsites)>1) {
        $cssSelector = array('class'=>'plural');
      }else{
        $cssSelector = array('class'=>'single');
      }// end if

      // Pass the items to theme_item_list.
      $vsitesList = theme_item_list(array('items'=>$vsites, 'title'=>'','type'=>'ul','attributes'=>$cssSelector));

      // Set a new field.
      $build['web_sites'] = array(
        '#title' => 'My Websites',
        '#type' => 'user_profile_item',
        '#markup' => $vsitesList,
          );
  }
}

/**
 * Implement hook_mail_alter().
 *
 * function to alter some of the emails that are sent out
 * to users based on certain actions
 */
function vsite_mail_alter(&$message) {
  // ToDo
}

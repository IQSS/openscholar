<?php

/**
 * @file
 * Integration with OG Vocabulary.
 */

/**
 * Implements hook_field_create_instance().
 *
 * Add OG vocanulary field to a group-content bundle.
 */
function vsite_vocab_field_create_instance($instance) {
  if (!og_is_group_audience_field($instance['field_name'])) {
    return;
  }
  $field_instance = og_fields_info(OG_VOCAB_FIELD);
  $field_instance['instance']['settings'] = array(
    'behaviors' => array('prepopulate' => array('action' => 'hide', 'fallback' => 'none', 'skip_perm' => 'administer nodes', 'status' => 0)),
    'user_register_form' => FALSE,
  );

  og_create_field(OG_VOCAB_FIELD, $instance['entity_type'], $instance['bundle'], $field_instance);
}

/**
 * Implements hook_form_FORM-ID_alter().
 *
 * 1) Limit avalible bundles to just Publc/Private bundles in OS.
 *
 * @see og_vocab_form_taxonomy_form_vocabulary_alter().
 */
function vsite_vocab_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  if(isset($form['og_vocab'])){

    //Get enabled bundles
    $bundles = array_keys(os_get_bundles(array(1,2)));

    //Remove bundle configuration for bundles not enabled in this site
    foreach (element_children($form['og_vocab']) as $child){
      list($bundle_type, $bundle) = explode(":", $child, 2);
      if(!in_array($bundle, $bundles)){
        unset($form['og_vocab'][$child]);
      }
    }
  }
}

/**
 * Implements hook_og_vocab_is_admin_context().
 */
function vsite_vocab_og_vocab_is_admin_context() {
  $item = menu_get_item();
  if (strpos($item['path'], 'cp/build/taxonomy') === 0) {
    $space = spaces_get_space();
    return array('group_type' => 'node', 'gid' => $space->id);
  }
}

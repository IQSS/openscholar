<?php

/**
 * Implements hook_menu().
 */
function vsite_support_menu() {
  $items = array();

  if (module_exists('contact')) {
    $items['contact_owner'] = array(
      'title' => 'Contact',
      'page callback' => 'vsite_support_site_contact',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => 'vsite_support_site_contact_access',
    );

    $items['cp/support'] = array(
      'title' => 'Support',
      'description' => 'Contact support.',
      'page callback' => 'vsite_support_site_sitewide_contact',
      'page arguments' => array('support'),
      'access callback' => 'spaces_access_admin',
      'type' => MENU_NORMAL_ITEM,
    );

    $items['cp/support/help'] = array(
      'title' => 'Support',
      'description' => 'Documentation to help with your site.',
      'page callback' => 'vsite_support_user_doc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
    );
  }

  return $items;
}

/**
 * Menu callback page for cp/support.
 */
function vsite_support_site_sitewide_contact() {
  module_load_include('inc', 'contact', 'contact.pages');
  return drupal_get_form('contact_site_form');
}

/**
 * Contact form that contacts the site owner.
 * @return contact_page
 */
function vsite_support_site_contact() {
  if (!($space = spaces_get_space()) || !($user = user_load($space->group->uid))) return MENU_ACCESS_DENIED;
  $space = spaces_get_space();
  if(!empty($space)) {
  	// Get the vsite_users_contact_form_anonymous varible
  	$contact_anon =  $space->controllers->variable->get('vsite_users_contact_form_anonymous', 'space');
  }else {
  	$contact_anon =  variable_get('vsite_users_contact_form_anonymous', '1');
  }
  if (empty($contact_anon) && !user_is_logged_in()) {
    $output = t('You need to be logged in in order to send mail to this user.');
  }
  elseif (!flood_is_allowed('contact', variable_get('contact_hourly_threshold', 3))) {
    $output = t('You cannot contact more than %number users per hour. Please try again later.', array('%number' => variable_get('contact_hourly_threshold', 3)));
  }
  else {
    drupal_set_title("Contact Site Owner");
    $output = drupal_get_form('vsite_support_contact_mail_owner', $user);
  }
  return $output;
}

/**
 * Function to create and return the contact_owner form.
 */
function vsite_support_contact_mail_owner($form, &$form_state, $recipient) {
  global $user;
  $email_user = user_load($recipient->uid);

  // Create the form.
  if($user->uid != 0) {
  	$form['#token'] = $user->name . $user->mail;
  }

  $form['recipient'] = array('#type' => 'value', '#value' => $recipient);
  if ($user->uid !=0 && $user->mail) {
    $form['from'] = array(
      '#type' => 'item',
      '#title' => t('From'),
      '#markup' => theme('username', array('account'=>$user)) .' &lt;'. check_plain($user->mail) .'&gt;',
    );
  }
  else {
    $form['name'] = array(
      '#type' => 'item',
      '#title' => t('From'),
      '#markup' => t('Anonymous'),
    );

    $form['sender_firstname'] = array(
      '#type' => 'textfield',
      '#title' => t('First name'),
      '#required' => TRUE,
    );

    $form['sender_lastname'] = array(
      '#type' => 'textfield',
      '#title' => t('Last name'),
      '#required' => TRUE,
    );

    $form['from'] = array(
      '#type' => 'textfield',
      '#title' => t('E-Mail Address'),
      '#required' => TRUE,
    );
  }

  // Check for a first name.
  $user_first_name = field_get_items('user', $email_user, 'field_first_name');
  if(isset($user_first_name[0]['safe_value'])) {
    $first_name = $user_first_name[0]['safe_value'];
    // Get the last name.
    $user_last_name = field_get_items('user', $email_user, 'field_last_name');
    if(isset($user_last_name[0]['safe_value'])) {
      $last_name = $user_last_name[0]['safe_value'];
    }else {
  	  $last_name = '';
    }
    $recipient->name = $first_name." ".$last_name;
  }elseif (($space = spaces_get_space()) && strlen($space->group->title)){
  	$recipient->name = $space->group->title;
  }

  if($user->uid === 0) {
  	$recipient_name = check_plain($recipient->name);
  }else {
  	$recipient_name = theme('username', array('account'=>$recipient));
  }

  $form['to'] = array(
    '#type' => 'item',
    '#title' => t('To'),
    '#markup' => $recipient_name,
  );
  $form['subject'] = array('#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 50,
    '#required' => TRUE,
  );
  $form['message'] = array('#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 15,
    '#required' => TRUE,
  );
  $form['copy'] = array('#type' => 'checkbox',
    '#title' => t('Send yourself a copy.'),
  );
  $form['submit'] = array('#type' => 'submit',
    '#value' => t('Send e-mail'),
  );

  return $form;
}

/**
 * Process the personal contact page form submission.
 */
function vsite_support_contact_mail_owner_submit($form, &$form_state) {
  global $user, $language;

  $account = $form_state['values']['recipient'];
  $space = spaces_get_space();

  // Send from the current user to the requested user.
  $to = $account->mail;
  if($user->uid != 0) {
  	$from = $user->mail;
  	$flood_name = $user->name; // Needed for the watchdog entry.
  }else {
    if (!strlen($form_state['values']['from']) || !preg_match('/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,7})+$/', $form_state['values']['from'])) {
      drupal_set_message(t('You must provide a valid e-mail address.'));
      return;
    }
    $flood_name = 'anonymous'; // Needed for the watchdog entry.
    $from = $form_state['values']['from'];
  }

  // Save both users and all form values for email composition.
  $values = $form_state['values'];
  $values['account'] = $account;
  $values['user'] = $user;
  $values['vsite'] = $space;

  // Send the e-mail in the requested user language.
  drupal_mail('vsite_support', 'user_mail', $to, user_preferred_language($account), $values, $from);

  // Send a copy if requested, using current page language.
  if ($form_state['values']['copy']) {
    drupal_mail('vsite_support', 'user_copy', $from, $language, $values, $from);
  }

  flood_register_event('contact');
  watchdog('mail', '%name-from sent %name-to an e-mail.', array('%name-from' => $flood_name, '%name-to' => $account->name));
  drupal_set_message(t('The message has been sent.'));

  // Back to the home page
  $form_state['redirect'] = "home";
}

/**
 * Check settings to see if you should display
 * @return contact_page
 */
function vsite_support_site_contact_access() {
  if (!($space = spaces_get_space()) || !($user = user_load($space->group->uid))) return FALSE;

  return TRUE;
  /*
  $contact_anon = $vsite->controllers->variable->get('vsite_users_contact_anonymous');
  // there was a contact form var here, but I don't know where it's set from
  return ($contact_anon !== 0 || user_is_logged_in());
  */
}

/**
 * Implements hook_mail().
 */
function vsite_support_mail($key, &$message, $params){
  $language = $message['language'];
  switch ($key) {
    case 'user_mail' :
    case 'user_copy' :
      $user = $params['user'];
      $account = $params['account'];
      $vsite = $params['vsite'];
      $message['subject'] = $params['subject'] .' [via ' . variable_get('site_name', 'Drupal') . ']';
      $message['body'][] = $params['message'];
      $message['body'][] = "\n\n---------------";

      $message['body'][] = t("This message was sent to you from \"!site\" on behalf of !name through your website contact form (!form-url).", array(
        '!name' => isset($user->name) ? $user->name : $params['sender_firstname'] . ' ' . $params['sender_lastname'] . ' (' .$message['from'] . ')',
        '!form-url' => url($_GET['q'], array(
          'absolute' => TRUE,
          'language' => $language
        )),
        '!site' => variable_get('site_name', 'Drupal')
      ));
      $message['body'][] = t("If you don't want to receive such e-mails, you can change your settings at !url.", array(
        '!url' => $vsite -> get_absolute_url("cp/settings")
      ));
      break;
  }
}

/**
 * Implements hook_cp_settings().
 * Hook into the cp_settings form to add the vsite_privacy form element.
 */
function vsite_support_cp_settings(){
  $a_settings = array();
  $space = spaces_get_space();

  if(!empty($space)) {
  	// Get the vsite_users_contact_form_anonymous varible
  	$annon_contact =  $space->controllers->variable->get('vsite_users_contact_form_anonymous', 'space');
  }else {
  	$annon_contact =  variable_get('vsite_users_contact_form_anonymous', '1');
  }
    //Should Vsite Contact forms allow anon. contact?
    $a_settings['vsite_users_contact_form_anonymous'] = array(
      'group' => array(
        '#id' => 'privacy',
        '#title' => t('Privacy'),
        '#weight' => 10,
      ),
      'form' => array(
        '#type' => 'checkbox',
        '#title' => t('Anonymous Contact'),
        '#default_value' => $annon_contact,
        '#description' => "When this is checked a user does not need to be logged in to contact you.",
      )
    );

  return $a_settings;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Alter the user profile form to remove the contact form module options.
 */
function vsite_support_form_user_profile_form_alter(&$form, &$form_state) {
	if(isset($form['contact'])) {
		$form['contact']['#access'] = FALSE;
	}
}

/**
 * Menu page callback for cp/support/help.
 *
 * returns advanced help's html for User-Documentation page
 **/
function vsite_support_user_doc() {
  $link_opts = array('purl' => array('disabled' => TRUE), 'query' => array('popup'=>1));
  $content = "<div class=\"view-vsite-support\"><p>Click " . l('here', 'help/os_help/User-Documentation', $link_opts) . " to view the User Documentation help page.<p></div>";
  return $content;
}